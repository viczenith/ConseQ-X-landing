{"version":3,"file":"static/js/376.586f5aba.chunk.js","mappings":"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","sources":["pages/CEO_Dashboard/lib/events.js","pages/CEO_Dashboard/CEODashboardComponents/Assessments.js","pages/CEO_Dashboard/services/orgHealth/index.js","pages/CEO_Dashboard/services/orgHealth/score.js"],"sourcesContent":["// Thin wrapper around CustomEvent to keep event names consistent and provide typed helpers\r\n\r\nexport const EVENT_NAMES = {\r\n  start: \"conseqx:assessment:start\",\r\n  progress: \"conseqx:assessment:progress\",\r\n  completed: \"conseqx:assessment:completed\",\r\n  view: \"conseqx:assessment:view\",\r\n};\r\n\r\nexport function emitAssessmentStart({ orgId, systemId }) {\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(EVENT_NAMES.start, { detail: { orgId, systemId } }));\r\n  } catch {}\r\n}\r\n\r\nexport function emitAssessmentProgress({ orgId, systemId, progress, result }) {\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(EVENT_NAMES.progress, { detail: { orgId, systemId, progress, result } }));\r\n  } catch {}\r\n}\r\n\r\nexport function emitAssessmentCompleted(resultObject) {\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(EVENT_NAMES.completed, { detail: resultObject }));\r\n  } catch {}\r\n}\r\n\r\nexport function onAssessmentStart(cb) {\r\n  const handler = (e) => cb?.(e?.detail);\r\n  window.addEventListener(EVENT_NAMES.start, handler);\r\n  return () => window.removeEventListener(EVENT_NAMES.start, handler);\r\n}\r\n\r\nexport function onAssessmentProgress(cb) {\r\n  const handler = (e) => cb?.(e?.detail);\r\n  window.addEventListener(EVENT_NAMES.progress, handler);\r\n  return () => window.removeEventListener(EVENT_NAMES.progress, handler);\r\n}\r\n\r\nexport function onAssessmentCompleted(cb) {\r\n  const handler = (e) => cb?.(e?.detail);\r\n  window.addEventListener(EVENT_NAMES.completed, handler);\r\n  return () => window.removeEventListener(EVENT_NAMES.completed, handler);\r\n}\r\n\r\nexport default {\r\n  EVENT_NAMES,\r\n  emitAssessmentStart,\r\n  emitAssessmentProgress,\r\n  emitAssessmentCompleted,\r\n  onAssessmentStart,\r\n  onAssessmentProgress,\r\n  onAssessmentCompleted,\r\n};\r\n","// src/pages/CEO_Dashboard/CEODashboardComponents/Assessments.js\r\nimport React, { useEffect, useMemo, useRef, useState, useCallback } from \"react\";\r\nimport { useOutletContext } from \"react-router-dom\";\r\nimport Assessment from \"../../../Assessment\";\r\nimport { FaHistory, FaTrash, FaPlay, FaEye, FaTimes, FaCheckCircle, FaLightbulb, FaBuilding } from \"react-icons/fa\";\r\nimport { getSystemsForUI, normalizeSystemKey } from \"../constants/systems\";\r\nimport * as events from \"../lib/events\";\r\nimport * as svc from \"../services/serviceSelector\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { systems as assessmentSystems } from \"../../../data/systems\"; // Import actual assessment systems\r\n\r\n// NEW: orgHealth service (minimal ingest + persistence + event)\r\nimport * as orgHealth from \"../services/orgHealth\";\r\n\r\n/* ---------- constants: the 6 systems (canonical) ---------- */\r\nconst SYSTEMS = getSystemsForUI();\r\n\r\n// Return the ACTUAL full assessment systems from src/data/systems.js\r\n// This ensures real-time tracking counts match the actual questions users answer\r\nfunction createAssessmentSystems() {\r\n  // Return the exact same systems that Assessment.js uses\r\n  // NO simplification - this keeps question counts synchronized\r\n  return assessmentSystems;\r\n}\r\n\r\nconst STORAGE_KEY = \"conseqx_assessments_v1\";\r\nconst ANSWERS_STORAGE_KEY = \"conseqx_assessment_answers_v1\";\r\nconst PROGRESS_STORAGE_KEY = \"conseqx_assessment_progress_v1\";\r\n// Remove ad-hoc ML hooks here; real analysis is handled via services layer when needed\r\n\r\n/* ---------- storage helpers ---------- */\r\nfunction readAll() {\r\n  try {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\nfunction writeAll(obj) {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(obj));\r\n  } catch {}\r\n}\r\nfunction addAssessmentForOrg(orgId, result, max = 200) {\r\n  if (!orgId) orgId = \"anon\";\r\n  const all = readAll();\r\n  const arr = all[orgId] || [];\r\n  const next = [{ ...result, timestamp: result.timestamp || Date.now() }, ...arr.filter((x) => x.id !== result.id)];\r\n  all[orgId] = next.slice(0, max);\r\n  writeAll(all);\r\n  return all[orgId];\r\n}\r\nfunction removeAssessmentForOrg(orgId, id) {\r\n  const all = readAll();\r\n  const arr = all[orgId] || [];\r\n  const next = arr.filter((x) => x.id !== id);\r\n  all[orgId] = next;\r\n  writeAll(all);\r\n  return next;\r\n}\r\nfunction summarizeSystems(arr = []) {\r\n  const bySys = {};\r\n  arr.forEach((r) => {\r\n    if (!r.systemId) return;\r\n    const k = normalizeSystemKey(r.systemId);\r\n    if (!bySys[k] || (bySys[k].timestamp || 0) < (r.timestamp || 0)) {\r\n      bySys[k] = { ...r, systemId: k };\r\n    }\r\n  });\r\n  return Object.keys(bySys).map((k) => ({ systemId: k, score: bySys[k].score || 0, result: bySys[k] }));\r\n}\r\n\r\n// Helper functions for persistent assessment state\r\nfunction readAssessmentAnswers(orgId) {\r\n  try {\r\n    const raw = localStorage.getItem(ANSWERS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    return data[orgId] || {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\nfunction writeAssessmentAnswers(orgId, answers) {\r\n  try {\r\n    const raw = localStorage.getItem(ANSWERS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    data[orgId] = answers;\r\n    localStorage.setItem(ANSWERS_STORAGE_KEY, JSON.stringify(data));\r\n  } catch {}\r\n}\r\n\r\nfunction readAssessmentProgress(orgId) {\r\n  try {\r\n    const raw = localStorage.getItem(PROGRESS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    return data[orgId] || {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\nfunction writeAssessmentProgress(orgId, progress) {\r\n  try {\r\n    const raw = localStorage.getItem(PROGRESS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    data[orgId] = progress;\r\n    localStorage.setItem(PROGRESS_STORAGE_KEY, JSON.stringify(data));\r\n  } catch {}\r\n}\r\n\r\n// Calculate answered count for a system based on the answer structure from Assessment.js\r\n// Assessment.js stores answers as: answers[subAssessmentId][questionId]\r\n// NOT as: answers[systemId][questionId]\r\nfunction calculateAnsweredCount(allAnswers, systemId) {\r\n  console.log(`calculateAnsweredCount called for ${systemId}:`, allAnswers);\r\n  \r\n  if (!allAnswers || typeof allAnswers !== 'object') {\r\n    console.log(`calculateAnsweredCount: No valid answers for ${systemId}`);\r\n    return 0;\r\n  }\r\n  \r\n  // Count across all sub-assessments for this system\r\n  let totalAnswered = 0;\r\n  \r\n  // Find the system definition to get all its sub-assessments\r\n  const system = assessmentSystems.find(s => s.id === systemId);\r\n  if (!system || !system.subAssessments) {\r\n    console.log(`calculateAnsweredCount: No system found for ${systemId}`);\r\n    return 0;\r\n  }\r\n  \r\n  // Count answered questions in each sub-assessment\r\n  // The answers are stored with subAssessment.id as the key, NOT systemId\r\n  system.subAssessments.forEach(subAssessment => {\r\n    const subAnswers = allAnswers[subAssessment.id] || {};\r\n    const answered = Object.keys(subAnswers).filter(key => {\r\n      const answer = subAnswers[key];\r\n      const isAnswered = answer !== null && answer !== undefined && answer !== '' && answer !== 'null';\r\n      return isAnswered;\r\n    }).length;\r\n    \r\n    console.log(`calculateAnsweredCount: ${systemId} -> ${subAssessment.id}: ${answered} answers out of ${Object.keys(subAnswers).length} total`, subAnswers);\r\n    totalAnswered += answered;\r\n  });\r\n  \r\n  console.log(`calculateAnsweredCount: ${systemId} FINAL TOTAL = ${totalAnswered}`);\r\n  return totalAnswered;\r\n}\r\n\r\n/* ---------- small UI primitives ---------- */\r\nfunction ProgressBar({ pct = 0, darkMode = false }) {\r\n  const containerBg = darkMode ? \"bg-gray-800\" : \"bg-gray-200\";\r\n  const fillClass = pct === 100 ? \"bg-green-500\" : \"bg-yellow-500\";\r\n  return (\r\n    <div className={`w-full h-2 rounded-full ${containerBg} overflow-hidden`}>\r\n      <div style={{ width: `${pct}%` }} className={`h-full ${fillClass}`} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AnalysisLoadingIndicator({ progress = 0, darkMode = false, systemTitle = \"System\" }) {\r\n  return (\r\n    <div className={`mt-3 p-4 rounded-lg border-2 border-dashed ${\r\n      darkMode \r\n        ? \"bg-gradient-to-br from-blue-900/20 to-purple-900/20 border-blue-500/30\" \r\n        : \"bg-gradient-to-br from-blue-50 to-purple-50 border-blue-300/50\"\r\n    } relative overflow-hidden`}>\r\n      {/* Animated background pattern */}\r\n      <div className=\"absolute inset-0 opacity-10\">\r\n        <div className={`h-full w-full ${\r\n          darkMode ? \"bg-blue-400\" : \"bg-blue-600\"\r\n        } animate-pulse`} \r\n        style={{\r\n          background: `linear-gradient(45deg, transparent 40%, ${darkMode ? '#3b82f6' : '#2563eb'} 50%, transparent 60%)`,\r\n          backgroundSize: '20px 20px',\r\n          animation: 'slide 2s linear infinite'\r\n        }} />\r\n      </div>\r\n      \r\n      <div className=\"relative z-10\">\r\n        {/* Header with spinning icon */}\r\n        <div className=\"flex items-center gap-3 mb-3\">\r\n          <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\r\n            darkMode \r\n              ? \"bg-blue-600 text-white shadow-lg shadow-blue-500/20\" \r\n              : \"bg-blue-500 text-white shadow-lg shadow-blue-500/30\"\r\n          } animate-spin`}>\r\n            🧠\r\n          </div>\r\n          <div>\r\n            <div className={`font-semibold ${darkMode ? \"text-blue-200\" : \"text-blue-800\"}`}>\r\n              AI Analysis in Progress\r\n            </div>\r\n            <div className={`text-sm ${darkMode ? \"text-blue-300\" : \"text-blue-600\"}`}>\r\n              Analyzing {systemTitle}...\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Enhanced progress bar with glow effect */}\r\n        <div className={`relative h-3 rounded-full overflow-hidden ${\r\n          darkMode ? \"bg-gray-800\" : \"bg-white/50\"\r\n        }`}>\r\n          <div \r\n            className={`h-full transition-all duration-500 ease-out relative ${\r\n              progress === 100 \r\n                ? \"bg-gradient-to-r from-green-400 to-emerald-500 shadow-lg shadow-green-500/30\" \r\n                : \"bg-gradient-to-r from-blue-400 to-purple-500 shadow-lg shadow-blue-500/30\"\r\n            }`}\r\n            style={{ width: `${progress}%` }}\r\n          >\r\n            {/* Animated shine effect */}\r\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse\" />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Progress percentage with animated counter */}\r\n        <div className=\"flex items-center justify-between mt-2\">\r\n          <div className={`text-sm font-medium ${darkMode ? \"text-blue-200\" : \"text-blue-700\"}`}>\r\n            {progress}% Complete\r\n          </div>\r\n          <div className=\"flex gap-1\">\r\n            {[...Array(3)].map((_, i) => (\r\n              <div\r\n                key={i}\r\n                className={`w-1.5 h-1.5 rounded-full ${\r\n                  darkMode ? \"bg-blue-400\" : \"bg-blue-500\"\r\n                } animate-bounce`}\r\n                style={{ animationDelay: `${i * 0.15}s` }}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Status messages based on progress */}\r\n        <div className={`mt-2 text-xs ${darkMode ? \"text-gray-300\" : \"text-gray-600\"}`}>\r\n          {progress < 20 && \"🔍 Initializing analysis engine...\"}\r\n          {progress >= 20 && progress < 40 && \"📊 Processing assessment data...\"}\r\n          {progress >= 40 && progress < 60 && \"🧮 Running AI algorithms...\"}\r\n          {progress >= 60 && progress < 80 && \"📈 Generating insights...\"}\r\n          {progress >= 80 && progress < 100 && \"✨ Finalizing recommendations...\"}\r\n          {progress === 100 && \"🎉 Analysis complete! Preparing results...\"}\r\n        </div>\r\n      </div>\r\n\r\n      <style jsx>{`\r\n        @keyframes slide {\r\n          0% { transform: translateX(-100%); }\r\n          100% { transform: translateX(100%); }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SystemRow({ s, state, onStart, onView, onRemove, darkMode = false }) {\r\n  // state = { status: \"not-started\"|\"ready-to-run\"|\"in-progress\"|\"completed\", progress, latestResult, answeredCount }\r\n  const hasAnswers = (state.answeredCount || 0) > 0;\r\n  const muted = !hasAnswers; // Only mute if no answers at all\r\n  const score = state.latestResult?.score ?? null;\r\n  const isAssessmentCompleted = state.status === \"completed\" && state.latestResult;\r\n  const hasRunCompleted = state.status === \"completed\" && score !== null;\r\n  \r\n  // Debug logging to track state changes - DETAILED\r\n  console.log(`🔄 SystemRow RENDER ${s.id}:`, {\r\n    status: state.status,\r\n    answeredCount: state.answeredCount,\r\n    hasAnswers,\r\n    progress: state.progress,\r\n    timestamp: Date.now()\r\n  });\r\n\r\n  const rowBgHover = darkMode ? \"hover:bg-gray-800\" : \"hover:bg-gray-50\";\r\n  const titleColor = darkMode ? \"text-gray-100\" : \"text-gray-900\";\r\n  const metaColor = darkMode ? \"text-gray-400\" : \"text-gray-500\";\r\n\r\n  // Run button logic: Lock (no answers) → Run (has answers, not running) → Running (in progress)\r\n  const isRunning = state.status === \"in-progress\" && state.progress < 100;\r\n  const isReadyToRun = state.status === \"ready-to-run\" || (hasAnswers && state.status === \"not-started\");\r\n  const canRun = hasAnswers && !isRunning; // SIMPLE: Can run if has answers and not currently running\r\n  const runDisabled = !canRun;\r\n  \r\n  console.log(`🔘 Button Logic ${s.id}: hasAnswers=${hasAnswers}, isRunning=${isRunning}, canRun=${canRun}, runDisabled=${runDisabled}`);\r\n  \r\n  // More explicit button styling\r\n  const runBtnBase = runDisabled\r\n    ? `${darkMode ? \"bg-gray-800 text-gray-400 cursor-not-allowed border-gray-700\" : \"bg-gray-200 text-gray-500 cursor-not-allowed border-gray-300\"}`\r\n    : `${darkMode ? \"bg-blue-600 text-white hover:bg-blue-700 border-blue-500\" : \"bg-blue-600 text-white hover:bg-blue-700 border-blue-500\"}`;\r\n\r\n  // View button logic: Only enabled after run is completed with results\r\n  const viewDisabled = !hasRunCompleted;\r\n  const viewBtnBase = viewDisabled\r\n    ? `${darkMode ? \"bg-gray-900/20 text-gray-500 cursor-not-allowed border-gray-700\" : \"bg-gray-50 text-gray-400 cursor-not-allowed border-gray-300\"}`\r\n    : `${darkMode ? \"bg-green-600 text-white hover:bg-green-700 border-green-500\" : \"bg-green-600 text-white hover:bg-green-700 border-green-500\"}`;\r\n\r\n  // Progress bar logic: show during analysis OR while answering questions\r\n  let progressPct = 0;\r\n  if (state.status === \"in-progress\") {\r\n    progressPct = state.progress;\r\n  } else if (hasAnswers && !isAssessmentCompleted) {\r\n    // Calculate percent answered\r\n    const system = assessmentSystems.find(sys => sys.id === s.id);\r\n    const totalQuestions = system ? system.subAssessments.reduce((sum, sub) => sum + sub.questions.length, 0) : 0;\r\n    progressPct = totalQuestions > 0 ? Math.round((state.answeredCount / totalQuestions) * 100) : 0;\r\n  }\r\n\r\n  return (\r\n    <div className={`flex items-center justify-between gap-2 p-2 rounded-md ${muted ? \"opacity-60\" : \"\"} ${rowBgHover} transition-all duration-200`}>\r\n      <div className=\"flex items-start gap-3 min-w-0\">\r\n        <div className=\"w-10 h-10 rounded-md bg-gradient-to-br from-indigo-600 to-blue-500 flex items-center justify-center text-white font-semibold\">\r\n          {s.icon}\r\n        </div>\r\n        <div className=\"min-w-0\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className={`font-medium truncate ${titleColor}`}>{s.title}</div>\r\n            {state.status === \"completed\" && (\r\n              <div className={`text-xs px-2 py-0.5 rounded-full ${darkMode ? \"bg-green-900/30 text-green-300\" : \"bg-green-100 text-green-700\"}`}>\r\n                {score}%\r\n              </div>\r\n            )}\r\n            {state.status === \"in-progress\" && (\r\n              <div className={`text-xs px-2 py-0.5 rounded-full ${darkMode ? \"bg-yellow-900/20 text-yellow-300\" : \"bg-yellow-100 text-yellow-700\"}`}>\r\n                In progress\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className={`text-xs ${metaColor} mt-1`}>\r\n            {!hasAnswers && \"Complete assessment questions first\"}\r\n            {hasAnswers && (state.status === \"not-started\" || state.status === \"ready-to-run\") && \"Ready to run analysis\"} \r\n            {hasAnswers && state.status === \"in-progress\" && state.progress < 100 && `Analyzing... ${state.progress}%`}\r\n            {hasAnswers && state.status === \"in-progress\" && state.progress >= 100 && \"Analysis complete\"}\r\n            {isAssessmentCompleted && `Analysis completed ${new Date(state.latestResult.timestamp).toLocaleString()}`}\r\n            {hasAnswers && !isAssessmentCompleted && state.status !== \"in-progress\" && `${state.answeredCount} questions answered`}\r\n          </div>\r\n\r\n          {(progressPct > 0 && !isAssessmentCompleted) && (\r\n            <div className=\"mt-2\">\r\n              <ProgressBar pct={progressPct} darkMode={darkMode} />\r\n            </div>\r\n          )}\r\n          {state.status === \"in-progress\" && (\r\n            <AnalysisLoadingIndicator \r\n              progress={state.progress} \r\n              darkMode={darkMode} \r\n              systemTitle={s.title}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-1\">\r\n        <button\r\n          onClick={() => onStart(s.id)}\r\n          disabled={runDisabled}\r\n          title={`${s.id}: ${state.status} (${state.answeredCount} answers) - ${!hasAnswers ? \"Answer at least one question to unlock analysis\" : isRunning ? \"AI analysis in progress...\" : \"Run comprehensive AI analysis\"}`}\r\n          className={`px-2 py-1.5 rounded-md border text-xs font-medium transition-all duration-200 ${runBtnBase} ${\r\n            isRunning ? 'animate-pulse shadow-lg' : ''\r\n          }`}\r\n        >\r\n          {isRunning ? (\r\n            <>\r\n              <div className=\"inline-block mr-1 animate-spin\">🧠</div>\r\n              AI Analyzing...\r\n            </>\r\n          ) : !hasAnswers ? (\r\n            <>\r\n              <div className=\"inline-block mr-1\">🔒</div>\r\n              Locked\r\n            </>\r\n          ) : (\r\n            <>\r\n              <FaPlay className=\"inline-block mr-1\" size={10} />\r\n              {state.status === \"ready-to-run\" ? \"🚀 Run X-ULTRA\" : \"▶ Run Analysis\"}\r\n            </>\r\n          )}\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => onView(s.id)}\r\n          disabled={viewDisabled}\r\n          title={viewDisabled ? \"Complete assessment to view results\" : \"View detailed results\"}\r\n          className={`px-2 py-1.5 rounded-md border text-xs transition-all duration-200 ${viewBtnBase}`}\r\n        >\r\n          <FaEye size={10} />\r\n        </button>\r\n\r\n        {state.latestResult && (\r\n          <button\r\n            onClick={() => onRemove(state.latestResult.id)}\r\n            className={`px-2 py-1.5 rounded-md text-xs transition-all duration-200 ${darkMode ? \"text-gray-400 hover:text-gray-200 hover:bg-gray-800\" : \"text-gray-500 hover:text-gray-700 hover:bg-gray-100\"}`}\r\n            title=\"Remove assessment\"\r\n          >\r\n            <FaTrash size={10} />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* ---------- main component ---------- */\r\nexport default function CEOAssessments() {\r\n  const { darkMode, org = null, user = null } = useOutletContext();\r\n  const orgId = org?.id || \"anon\";\r\n\r\n  // Broadcast parent theme changes as an event so nested components can optionally subscribe\r\n  useEffect(() => {\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:theme:changed\", { detail: { darkMode } }));\r\n    } catch {}\r\n  }, [darkMode]);\r\n\r\n  // recent are persisted assessment records for this org (chronological newest first)\r\n  const [recent, setRecent] = useState(() => {\r\n    try {\r\n      const all = readAll();\r\n      return all[orgId] || [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // systemStates maps systemId -> { status, progress, latestResult, answeredCount }\r\n  const [systemStates, setSystemStates] = useState(() => {\r\n    // derive initial state from recent items and persistent answers\r\n    const persistentAnswers = readAssessmentAnswers(orgId);\r\n    const init = {};\r\n    SYSTEMS.forEach((s) => {\r\n      const answeredCount = calculateAnsweredCount(persistentAnswers, s.id);\r\n      init[s.id] = { \r\n        status: \"not-started\", \r\n        progress: 0, \r\n        latestResult: null, \r\n        answeredCount \r\n      };\r\n    });\r\n    const byLatest = summarizeSystems(recent);\r\n    byLatest.forEach((b) => {\r\n      const answeredCount = calculateAnsweredCount(persistentAnswers, b.systemId);\r\n      if (!init[b.systemId]) {\r\n        init[b.systemId] = { \r\n          status: \"completed\", \r\n          progress: 100, \r\n          latestResult: b.result, \r\n          answeredCount \r\n        };\r\n      } else {\r\n        init[b.systemId] = { \r\n          status: \"completed\", \r\n          progress: 100, \r\n          latestResult: b.result, \r\n          answeredCount \r\n        };\r\n      }\r\n    });\r\n    return init;\r\n  });\r\n\r\n  // Real-time assessment progress tracking with persistent storage\r\n  // Note: Assessment.js manages the actual answer state internally\r\n  const [assessmentAnswers, setAssessmentAnswers] = useState({});\r\n  const [currentAssessmentSystem, setCurrentAssessmentSystem] = useState(null);\r\n  const [showDetailModal, setShowDetailModal] = useState(false);\r\n  const [selectedSystemDetails, setSelectedSystemDetails] = useState(null);\r\n  const [realTimeProgress, setRealTimeProgress] = useState(() => readAssessmentProgress(orgId));\r\n\r\n  // Close handler: hide modal then clear selected details after exit animation to avoid content flash\r\n  const handleClose = useCallback(() => {\r\n    setShowDetailModal(false);\r\n    // keep details for the duration of the exit animation so content doesn't disappear mid-animation\r\n    setTimeout(() => setSelectedSystemDetails(null), 320);\r\n  }, []);\r\n  \r\n  // Ref to track Assessment component's internal answer state (live)\r\n  const assessmentAnswersRef = useRef({});\r\n  \r\n  // Helper to get current answers (prefer live state from ref, fallback to state)\r\n  const getCurrentAnswers = () => {\r\n    return Object.keys(assessmentAnswersRef.current).length > 0 \r\n      ? assessmentAnswersRef.current \r\n      : assessmentAnswers;\r\n  };\r\n\r\n  // Force re-evaluation of system states when assessmentAnswers change\r\n  useEffect(() => {\r\n    console.log('🔄 useEffect triggered by assessmentAnswers change');\r\n    const currentAnswers = getCurrentAnswers();\r\n    \r\n    // Always update, even if empty (to reset states)\r\n    setSystemStates((prev) => {\r\n      console.log('⚡ Force updating systemStates from useEffect');\r\n      const next = {}; // Create completely new object\r\n      \r\n      SYSTEMS.forEach((s) => {\r\n        const answeredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n        const currentState = prev[s.id] || { status: \"not-started\", progress: 0, latestResult: null, answeredCount: 0 };\r\n        const hasExistingResult = currentState.latestResult;\r\n        \r\n        const newStatus = hasExistingResult ? \"completed\" : \r\n                        answeredCount > 0 ? \"ready-to-run\" : \"not-started\";\r\n        \r\n        console.log(`🔧 Force update ${s.id}: ${currentState.answeredCount} -> ${answeredCount}, ${currentState.status} -> ${newStatus}`);\r\n        \r\n        next[s.id] = {\r\n          status: newStatus,\r\n          progress: currentState.progress || 0,\r\n          latestResult: currentState.latestResult || null,\r\n          answeredCount: answeredCount,\r\n          lastUpdate: Date.now() // Force re-render trigger\r\n        };\r\n      });\r\n      \r\n      return next; // Always return new object to force re-render\r\n    });\r\n  }, [assessmentAnswers, assessmentAnswersRef.current]); // Trigger on any answer changes\r\n\r\n  // Broadcast update helper (persist + set state + broadcast event)\r\n  function persistAndBroadcast(newList) {\r\n    const all = readAll();\r\n    all[orgId] = newList;\r\n    writeAll(all);\r\n    setRecent(newList);\r\n\r\n    // update systemStates including answeredCount using LIVE answers\r\n    const byLatest = summarizeSystems(newList);\r\n    const currentAnswers = getCurrentAnswers(); // Use live answers from Assessment component\r\n    setSystemStates((prev) => {\r\n      const next = { ...prev };\r\n      SYSTEMS.forEach((s) => {\r\n        const answeredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n        next[s.id] = next[s.id] || { \r\n          status: \"not-started\", \r\n          progress: 0, \r\n          latestResult: null, \r\n          answeredCount \r\n        };\r\n        // Update answeredCount even if already exists\r\n        next[s.id].answeredCount = answeredCount;\r\n      });\r\n      byLatest.forEach((b) => {\r\n        const answeredCount = calculateAnsweredCount(currentAnswers, b.systemId);\r\n        next[b.systemId] = { \r\n          status: \"completed\", \r\n          progress: 100, \r\n          latestResult: b.result, \r\n          answeredCount \r\n        };\r\n      });\r\n      return next;\r\n    });\r\n\r\n    // emit update event for DashboardHome and other components\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:assessment:update\", { detail: { orgId, assessments: newList } }));\r\n      console.log(`📡 Assessments: Dispatched update event for ${newList.length} assessments`);\r\n    } catch {}\r\n    // BroadcastChannel for cross-tab (optional)\r\n    try {\r\n      if (\"BroadcastChannel\" in window) {\r\n        const bc = new BroadcastChannel(\"conseqx_assessments\");\r\n        bc.postMessage({ type: \"assessments:update\", orgId, assessments: newList });\r\n        bc.close();\r\n        console.log(`📡 Assessments: Broadcast update for ${newList.length} assessments`);\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  // handle completion event (from Assessment/System pages)\r\n  function handleAssessmentComplete(result = {}) {\r\n    const normalized = {\r\n      id: result.id || `A-${Date.now().toString(36)}`,\r\n      systemId: result.systemId || result.system || \"general\",\r\n      title: result.title || result.name || (result.systemId || \"Assessment\"),\r\n      score: typeof result.score === \"number\" ? result.score : result.score ? Number(result.score) : null,\r\n      owner: result.owner || (user && user.name) || \"Unknown\",\r\n      meta: result.meta || {},\r\n      timestamp: result.timestamp || Date.now(),\r\n      orgId,\r\n      notes: result.notes || \"\",\r\n    };\r\n\r\n    const newList = addAssessmentForOrg(orgId, normalized, 200);\r\n    persistAndBroadcast(newList);\r\n\r\n    // Dispatch specific completion event for DashboardHome\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:assessment:completed\", { \r\n        detail: { \r\n          orgId, \r\n          assessment: normalized, \r\n          systemId: normalized.systemId,\r\n          score: normalized.score \r\n        } \r\n      }));\r\n      console.log(`🎉 Assessments: Assessment completed for system ${normalized.systemId} with score ${normalized.score}%`);\r\n    } catch {}\r\n\r\n    // NEW: feed normalized assessment into the OrgHealth service\r\n    try {\r\n      orgHealth.ingestAssessment(normalized);\r\n    } catch (e) {\r\n      // non-fatal\r\n      console.error(\"Error ingesting assessment into orgHealth service\", e);\r\n    }\r\n  }\r\n\r\n  // handle incoming events\r\n  useEffect(() => {\r\n    function onCompleted(e) {\r\n      const result = e?.detail;\r\n      if (!result || (result.orgId && result.orgId !== orgId)) return;\r\n      handleAssessmentComplete(result);\r\n    }\r\n    function onProgress(e) {\r\n      const { systemId, progress } = e?.detail || {};\r\n      if (!systemId) return;\r\n      setSystemStates((prev) => {\r\n        const cur = prev[systemId] || { status: \"not-started\", progress: 0, latestResult: null };\r\n        const nextState = {\r\n          ...prev,\r\n          [systemId]: {\r\n            ...cur,\r\n            status: progress >= 100 ? \"completed\" : \"in-progress\",\r\n            progress: Math.max(0, Math.min(100, progress)),\r\n          },\r\n        };\r\n        // if completed and we have result in event, call handleAssessmentComplete (if detail includes result)\r\n        if (progress >= 100 && e.detail?.result) {\r\n          handleAssessmentComplete(e.detail.result);\r\n        }\r\n        return nextState;\r\n      });\r\n    }\r\n\r\n    function onAssessmentStart(e) {\r\n      const { systemId } = e?.detail || {};\r\n      if (!systemId) return;\r\n      setCurrentAssessmentSystem(systemId);\r\n      // Do not set analysis status to in-progress when user opens the assessment.\r\n      // \"in-progress\" should only reflect the AI analysis run, not question answering.\r\n      // We'll keep the current status here.\r\n    }\r\n\r\n    function onQuestionAnswered(e) {\r\n      const { systemId, questionId, answer, totalQuestions, answeredCount } = e?.detail || {};\r\n      if (!systemId) return;\r\n      \r\n      // Calculate real-time progress based on actual answered count from Assessment.js\r\n      const realAnsweredCount = answeredCount || 0;\r\n      const progress = totalQuestions > 0 ? Math.round((realAnsweredCount / totalQuestions) * 100) : 0;\r\n      \r\n      // Update real-time progress tracking\r\n      setRealTimeProgress((prev) => {\r\n        const updated = {\r\n          ...prev,\r\n          [systemId]: progress,\r\n        };\r\n        // Persist progress\r\n        writeAssessmentProgress(orgId, updated);\r\n        return updated;\r\n      });\r\n      \r\n      // Update system state with real progress and answeredCount from the event\r\n      setSystemStates((prev) => {\r\n        const currentState = prev[systemId] || {};\r\n        const hasExistingResult = currentState.latestResult;\r\n        \r\n        return {\r\n          ...prev,\r\n          [systemId]: {\r\n            ...currentState,\r\n            // IMMEDIATELY unlock Run button when ANY question is answered\r\n            status: hasExistingResult ? \"completed\" : \r\n                    realAnsweredCount > 0 ? \"ready-to-run\" : \"not-started\",\r\n            // Keep analysis progress separate from question answering progress\r\n            progress: currentState.progress || 0,\r\n            answeredCount: realAnsweredCount,\r\n          },\r\n        };\r\n      });\r\n      \r\n      // Emit progress event for other components\r\n      events.emitAssessmentProgress({ orgId, systemId, progress, answeredCount: realAnsweredCount });\r\n    }\r\n\r\n    window.addEventListener(\"conseqx:assessment:completed\", onCompleted);\r\n    window.addEventListener(\"conseqx:assessment:progress\", onProgress);\r\n    window.addEventListener(\"conseqx:assessment:start\", onAssessmentStart);\r\n    window.addEventListener(\"conseqx:assessment:question-answered\", onQuestionAnswered);\r\n    \r\n    return () => {\r\n      window.removeEventListener(\"conseqx:assessment:completed\", onCompleted);\r\n      window.removeEventListener(\"conseqx:assessment:progress\", onProgress);\r\n      window.removeEventListener(\"conseqx:assessment:start\", onAssessmentStart);\r\n      window.removeEventListener(\"conseqx:assessment:question-answered\", onQuestionAnswered);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [orgId]);\r\n\r\n  // also listen for BroadcastChannel updates (cross-tab)\r\n  useEffect(() => {\r\n    if (!(\"BroadcastChannel\" in window)) return;\r\n    const bc = new BroadcastChannel(\"conseqx_assessments\");\r\n    const handler = (ev) => {\r\n      try {\r\n        const { type, orgId: msgOrg, payload } = ev.data || {};\r\n        if (type === \"assessments:update\" && msgOrg === orgId) {\r\n          setRecent(payload || []);\r\n          // update systemStates derived including answeredCount using LIVE answers\r\n          const byLatest = summarizeSystems(payload || []);\r\n          const currentAnswers = getCurrentAnswers(); // Use live answers\r\n          setSystemStates((prev) => {\r\n            const next = { ...prev };\r\n            SYSTEMS.forEach((s) => {\r\n              const answeredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n              next[s.id] = next[s.id] || { \r\n                status: \"not-started\", \r\n                progress: 0, \r\n                latestResult: null, \r\n                answeredCount \r\n              };\r\n              next[s.id].answeredCount = answeredCount;\r\n            });\r\n            byLatest.forEach((b) => {\r\n              const answeredCount = calculateAnsweredCount(currentAnswers, b.systemId);\r\n              next[b.systemId] = { \r\n                status: \"completed\", \r\n                progress: 100, \r\n                latestResult: b.result, \r\n                answeredCount \r\n              };\r\n            });\r\n            return next;\r\n          });\r\n        }\r\n      } catch (e) {}\r\n    };\r\n    bc.addEventListener(\"message\", handler);\r\n    return () => bc.close();\r\n  }, [orgId]);\r\n\r\n  // Sync with localStorage changes for real-time updates\r\n  useEffect(() => {\r\n    const syncFromStorage = () => {\r\n      const persistentProgress = readAssessmentProgress(orgId);\r\n      setRealTimeProgress(persistentProgress);\r\n      \r\n      // Update system states with current answered counts from LIVE state\r\n      const currentAnswers = getCurrentAnswers(); // Use live answers from Assessment\r\n      setSystemStates((prev) => {\r\n        const next = { ...prev };\r\n        SYSTEMS.forEach((s) => {\r\n          const answeredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n          if (next[s.id]) {\r\n            next[s.id] = {\r\n              ...next[s.id],\r\n              answeredCount,\r\n              // Update status based on answers and current state\r\n              status: next[s.id].latestResult ? \"completed\" : \r\n                      answeredCount > 0 ? \"ready-to-run\" : \"not-started\"\r\n            };\r\n          }\r\n        });\r\n        return next;\r\n      });\r\n    };\r\n\r\n    // Listen for storage events (cross-tab sync)\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === ANSWERS_STORAGE_KEY || e.key === PROGRESS_STORAGE_KEY) {\r\n        syncFromStorage();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    \r\n    // Periodic sync to catch any missed updates\r\n    const syncInterval = setInterval(syncFromStorage, 1000);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n      clearInterval(syncInterval);\r\n    };\r\n  }, [orgId]);\r\n\r\n  // Prevent accidental navigation during active assessment\r\n  useEffect(() => {\r\n    const hasActiveAssessment = Object.values(systemStates).some(state => \r\n      (state.answeredCount || 0) > 0 && !state.latestResult\r\n    );\r\n\r\n    const handleBeforeUnload = (e) => {\r\n      if (hasActiveAssessment) {\r\n        e.preventDefault();\r\n        e.returnValue = 'You have unsaved assessment progress. Are you sure you want to leave?';\r\n        return 'You have unsaved assessment progress. Are you sure you want to leave?';\r\n      }\r\n    };\r\n\r\n    if (hasActiveAssessment) {\r\n      window.addEventListener('beforeunload', handleBeforeUnload);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, [systemStates]);\r\n\r\n  /* ---------- Actions invoked by the panel ---------- */\r\n\r\n  // onStart: if real system page is active, you should route there; else we simulate a run here.\r\n  function onStart(systemId) {\r\n    const cur = systemStates[systemId];\r\n    // if in-progress and <100 do nothing\r\n    if (cur && cur.status === \"in-progress\" && cur.progress < 100) return;\r\n\r\n    // Check if user has answered questions - this should always be true if button is enabled\r\n    const hasAnswers = (cur?.answeredCount || 0) > 0;\r\n    if (!hasAnswers) {\r\n      console.warn('Run button clicked but no answers found. This should not happen.');\r\n      return;\r\n    }\r\n\r\n    // Mark as in-progress IMMEDIATELY when Run is clicked\r\n    setSystemStates((prev) => ({\r\n      ...prev,\r\n      [systemId]: {\r\n        ...prev[systemId],\r\n        status: \"in-progress\",\r\n        progress: 1 // Start at 1% to show analysis has begun\r\n      }\r\n    }));\r\n\r\n    // Emit start event\r\n    events.emitAssessmentStart({ systemId, orgId });\r\n\r\n    // if no other component will handle start, we simulate progress here and complete a deterministic result\r\n    simulateRunIfNoHandler(systemId);\r\n  }\r\n\r\n  // onView: show report for latestResult - can open slide-over or navigate to report page\r\n  function onView(systemId) {\r\n    const state = systemStates[systemId];\r\n    if (!state || !state.latestResult) return;\r\n    \r\n    // Find the system details\r\n    const systemDetails = SYSTEMS.find(s => s.id === systemId);\r\n    if (systemDetails) {\r\n      // Enrich modal with per-sub-assessment answers and progress\r\n      const allAnswers = getCurrentAnswers();\r\n      const sysDef = assessmentSystems.find(s => s.id === systemId);\r\n      const perSubAnswers = {};\r\n      sysDef?.subAssessments?.forEach(sub => {\r\n        if (allAnswers[sub.id]) perSubAnswers[sub.id] = allAnswers[sub.id];\r\n      });\r\n      // Calculate progress per sub-assessment\r\n      const subProgress = sysDef?.subAssessments?.map(sub => {\r\n        const total = sub.questions.length;\r\n        const answered = perSubAnswers[sub.id] ? Object.keys(perSubAnswers[sub.id]).filter(k => {\r\n          const a = perSubAnswers[sub.id][k];\r\n          return a !== null && a !== undefined && a !== '';\r\n        }).length : 0;\r\n        return { id: sub.id, title: sub.title, answered, total };\r\n      }) || [];\r\n\r\n      const details = {\r\n        ...systemDetails,\r\n        result: state.latestResult,\r\n        answers: perSubAnswers,\r\n        subProgress,\r\n      };\r\n      // don't reopen if already showing same result (prevents flicker)\r\n      if (showDetailModal && selectedSystemDetails && selectedSystemDetails.result?.id === state.latestResult.id) return;\r\n      setSelectedSystemDetails(details);\r\n      // open synchronously; details will be cleared after exit animation by handleClose\r\n      setShowDetailModal(true);\r\n    }\r\n    \r\n    // Also dispatch event for other components\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:assessment:view\", { detail: { result: state.latestResult } }));\r\n    } catch {}\r\n  }\r\n\r\n  function onRemove(id) {\r\n    const next = removeAssessmentForOrg(orgId, id);\r\n    persistAndBroadcast(next);\r\n  }\r\n\r\n  // Simulation: if nobody handles start event within a short time, run an internal simulated run\r\n  function simulateRunIfNoHandler(systemId) {\r\n    // Already marked as in-progress in onStart function\r\n    \r\n    // simulate progress increments until 100\r\n    let pct = 1;\r\n    const ticker = setInterval(() => {\r\n      pct = Math.min(100, pct + Math.round(5 + Math.random() * 15));\r\n      \r\n      // Update progress in real-time\r\n      setSystemStates((prev) => ({\r\n        ...prev,\r\n        [systemId]: {\r\n          ...prev[systemId],\r\n          status: pct >= 100 ? \"completed\" : \"in-progress\",\r\n          progress: pct\r\n        }\r\n      }));\r\n      \r\n      // dispatch progress event (so all listeners get updated)\r\n      events.emitAssessmentProgress({ orgId, systemId, progress: pct });\r\n      \r\n      if (pct >= 100) {\r\n        clearInterval(ticker);\r\n        // produce a deterministic result via service selector (mock or API)\r\n        (async () => {\r\n          try {\r\n            const result = await svc.runAssessment(orgId, systemId);\r\n            // This will trigger handleAssessmentComplete and unlock the View button\r\n            events.emitAssessmentCompleted(result);\r\n          } catch (error) {\r\n            console.error('Assessment run failed:', error);\r\n            // Reset state on error\r\n            setSystemStates((prev) => ({\r\n              ...prev,\r\n              [systemId]: {\r\n                ...prev[systemId],\r\n                status: \"ready-to-run\",\r\n                progress: 0\r\n              }\r\n            }));\r\n          }\r\n        })();\r\n      }\r\n    }, 600); // Slightly faster updates for better UX\r\n  }\r\n\r\n  // derived KPIs\r\n  const kpis = useMemo(() => {\r\n    const count = recent.length;\r\n    const avgScore = count ? Math.round(recent.reduce((s, r) => s + (Number(r.score) || 0), 0) / count) : null;\r\n    const lastRun = recent[0]?.timestamp || null;\r\n    return { count, avgScore, lastRun };\r\n  }, [recent]);\r\n\r\n  // Detailed Assessment Modal Component\r\n  // Always-mounted modal that shows/hides its content based on `isOpen` to avoid mount/unmount flicker\r\n  const DetailedAssessmentModal = ({ isOpen }) => {\r\n    if (!selectedSystemDetails && !isOpen) return null;\r\n\r\n  const { title, result, icon, answers, subProgress } = selectedSystemDetails || {};\r\n    const score = result?.score || 0;\r\n    const timestamp = result?.timestamp;\r\n\r\n    // Mock AI recommendations and case studies for demonstration\r\n    const aiRecommendations = [\r\n      \"Implement structured feedback loops to improve communication\",\r\n      \"Establish clear performance metrics and tracking systems\",\r\n      \"Develop cross-functional collaboration protocols\",\r\n      \"Create standardized training programs for consistency\"\r\n    ];\r\n\r\n    const caseStudy = {\r\n      company: \"Dangote Group (Nigeria)\",\r\n      challenge: `Similar challenges in ${title.toLowerCase()} across multiple business units`,\r\n      solution: \"Implemented centralized governance framework with decentralized execution\",\r\n      result: \"35% improvement in operational efficiency within 18 months\",\r\n      keyLessons: [\r\n        \"Standardized processes while maintaining local flexibility\",\r\n        \"Invested in technology infrastructure for real-time monitoring\",\r\n        \"Created cross-functional teams to break down silos\"\r\n      ]\r\n    };\r\n\r\n    return (\r\n      <AnimatePresence>\r\n        {isOpen && selectedSystemDetails && (\r\n          <motion.div\r\n            key={selectedSystemDetails.result?.id || 'detail-modal'}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\r\n            onClick={handleClose}\r\n          >\r\n            <motion.div\r\n              initial={{ scale: 0.9, opacity: 0 }}\r\n              animate={{ scale: 1, opacity: 1 }}\r\n              exit={{ scale: 0.9, opacity: 0 }}\r\n              className={`max-w-4xl w-full max-h-[90vh] overflow-y-auto rounded-2xl ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-200\"} border shadow-2xl`}\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n            {/* Header */}\r\n            <div className={`sticky top-0 ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-200\"} border-b px-6 py-4 flex items-center justify-between`}>\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-indigo-600 to-blue-500 flex items-center justify-center text-white text-xl font-bold\">\r\n                  {icon}\r\n                </div>\r\n                <div>\r\n                  <h2 className={`text-xl font-bold ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                    {title} Assessment Results\r\n                  </h2>\r\n                  <p className={`text-sm ${darkMode ? \"text-gray-400\" : \"text-gray-500\"}`}>\r\n                    Completed {timestamp ? new Date(timestamp).toLocaleString() : 'Recently'}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <button\r\n                onClick={handleClose}\r\n                className={`p-2 rounded-lg ${darkMode ? \"hover:bg-gray-800 text-gray-400\" : \"hover:bg-gray-100 text-gray-500\"}`}\r\n              >\r\n                <FaTimes size={20} />\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"p-6 space-y-6\">\r\n              {/* Score Overview */}\r\n              <div className={`rounded-xl p-4 ${darkMode ? \"bg-gray-800\" : \"bg-gray-50\"}`}>\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h3 className={`font-semibold ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>Overall Score</h3>\r\n                  <div className={`text-2xl font-bold ${score >= 80 ? \"text-green-500\" : score >= 60 ? \"text-yellow-500\" : \"text-red-500\"}`}>\r\n                    {score}%\r\n                  </div>\r\n                </div>\r\n                <div className={`w-full h-3 rounded-full ${darkMode ? \"bg-gray-700\" : \"bg-gray-200\"}`}>\r\n                  <div\r\n                    className={`h-full rounded-full transition-all duration-500 ${\r\n                      score >= 80 ? \"bg-green-500\" : score >= 60 ? \"bg-yellow-500\" : \"bg-red-500\"\r\n                    }`}\r\n                    style={{ width: `${score}%` }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Sub-assessments with progress and answers */}\r\n              <div>\r\n                <h3 className={`text-lg font-semibold mb-4 ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                  Assessment Breakdown\r\n                </h3>\r\n                <div className=\"space-y-3\">\r\n                  {subProgress.map((sub, index) => (\r\n                    <div key={sub.id} className={`p-4 rounded-lg border ${darkMode ? \"bg-gray-800 border-gray-700\" : \"bg-gray-50 border-gray-200\"}`}>\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <h4 className={`font-medium ${darkMode ? \"text-gray-200\" : \"text-gray-800\"}`}>{sub.title}</h4>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FaCheckCircle className=\"text-green-500\" size={16} />\r\n                          <span className={`text-sm ${darkMode ? \"text-gray-400\" : \"text-gray-600\"}`}>\r\n                            {sub.answered} / {sub.total} answered\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"w-full mb-2\">\r\n                        <ProgressBar pct={sub.total > 0 ? Math.round((sub.answered / sub.total) * 100) : 0} darkMode={darkMode} />\r\n                      </div>\r\n                      <p className={`text-sm ${darkMode ? \"text-gray-400\" : \"text-gray-600\"}`}>Questions:</p>\r\n                      <ul className=\"list-disc list-inside ml-4\">\r\n                        {Object.entries(answers[sub.id] || {}).map(([qid, val]) => (\r\n                          <li key={qid} className={`text-xs ${darkMode ? \"text-gray-300\" : \"text-gray-700\"}`}>Q{qid}: <span className=\"font-semibold\">{val}</span></li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* AI Recommendations */}\r\n              <div>\r\n                <h3 className={`text-lg font-semibold mb-4 flex items-center gap-2 ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                  <FaLightbulb className=\"text-yellow-500\" />\r\n                  AI Recommendations\r\n                </h3>\r\n                <div className=\"space-y-2\">\r\n                  {aiRecommendations.map((rec, index) => (\r\n                    <div key={index} className={`p-3 rounded-lg ${darkMode ? \"bg-blue-900/20 border-blue-500/30\" : \"bg-blue-50 border-blue-200\"} border`}>\r\n                      <p className={`text-sm ${darkMode ? \"text-blue-200\" : \"text-blue-800\"}`}>{rec}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* African Company Case Study */}\r\n              <div>\r\n                <h3 className={`text-lg font-semibold mb-4 flex items-center gap-2 ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                  <FaBuilding className=\"text-green-500\" />\r\n                  African Success Story\r\n                </h3>\r\n                <div className={`rounded-xl p-4 border ${darkMode ? \"bg-green-900/20 border-green-500/30\" : \"bg-green-50 border-green-200\"}`}>\r\n                  <div className=\"space-y-3\">\r\n                    <div>\r\n                      <h4 className={`font-semibold ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>{caseStudy.company}</h4>\r\n                      <p className={`text-sm mt-1 ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{caseStudy.challenge}</p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h5 className={`font-medium ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>Solution:</h5>\r\n                      <p className={`text-sm ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{caseStudy.solution}</p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h5 className={`font-medium ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>Result:</h5>\r\n                      <p className={`text-sm ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{caseStudy.result}</p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h5 className={`font-medium ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>Key Lessons:</h5>\r\n                      <ul className=\"list-disc list-inside space-y-1 mt-1\">\r\n                        {caseStudy.keyLessons.map((lesson, index) => (\r\n                          <li key={index} className={`text-sm ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{lesson}</li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        </motion.div>\r\n      )}\r\n      </AnimatePresence>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"flex items-start justify-between gap-4\">\r\n        <div>\r\n          <h2 className={`${darkMode ? \"text-gray-100\" : \"text-gray-900\"} text-lg font-semibold`}>Assessments</h2>\r\n          <p className={`mt-2 text-sm ${darkMode ? \"text-gray-300\" : \"text-gray-600\"}`}>\r\n            Run or view system assessments. Systems update in real-time as runs progress and complete.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className={`${darkMode ? \"text-gray-200\" : \"text-sm text-gray-700\"}`}>\r\n            <div>\r\n              Recent runs: <span className=\"font-semibold\">{kpis.count}</span>\r\n            </div>\r\n            <div className={`${darkMode ? \"text-gray-400\" : \"text-xs text-gray-500\"}`}>Avg score: {kpis.avgScore !== null ? `${kpis.avgScore}%` : \"—\"}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-4 grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n        <div className=\"lg:col-span-2\">\r\n          <div className={`rounded-xl p-3 border ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-100\"} shadow-sm`}>\r\n            {/* Embedded Assessment component: it should call onComplete when it finishes */}\r\n            {/* Pass darkMode prop + key to force remount on theme change so internal theme state can't diverge */}\r\n            <Assessment\r\n              key={darkMode ? \"assessment-dark\" : \"assessment-light\"}\r\n              darkMode={darkMode}\r\n              onComplete={(res) => handleAssessmentComplete(res)}\r\n              onAnswersChange={(answers) => {\r\n                console.log('🚀 onAnswersChange called with:', answers);\r\n                \r\n                // Track the actual answer state from Assessment.js\r\n                assessmentAnswersRef.current = answers;\r\n                setAssessmentAnswers(answers);\r\n                \r\n                // FORCE IMMEDIATE update of system states with new answered counts\r\n                setSystemStates((prev) => {\r\n                  console.log('⚡ Updating systemStates from onAnswersChange');\r\n                  const next = {}; // Create completely new object to force re-render\r\n                  \r\n                  SYSTEMS.forEach((s) => {\r\n                    const answeredCount = calculateAnsweredCount(answers, s.id);\r\n                    const currentState = prev[s.id] || { status: \"not-started\", progress: 0, latestResult: null, answeredCount: 0 };\r\n                    const hasExistingResult = currentState.latestResult;\r\n                    \r\n                    // Determine new status based on answers and existing results\r\n                    const newStatus = hasExistingResult ? \"completed\" : \r\n                                    answeredCount > 0 ? \"ready-to-run\" : \"not-started\";\r\n                    \r\n                    console.log(`📊 System ${s.id}: ${currentState.answeredCount} -> ${answeredCount} answers, ${currentState.status} -> ${newStatus}`);\r\n                    \r\n                    next[s.id] = {\r\n                      status: newStatus,\r\n                      progress: currentState.progress || 0,\r\n                      latestResult: currentState.latestResult || null,\r\n                      answeredCount: answeredCount,\r\n                      // Add timestamp to force re-renders\r\n                      lastUpdate: Date.now()\r\n                    };\r\n                  });\r\n                  \r\n                  console.log('✅ New systemStates:', next);\r\n                  return next; // Always return new object\r\n                });\r\n                \r\n                // Persist answers for cross-tab sync\r\n                writeAssessmentAnswers(orgId, answers);\r\n              }}\r\n              onQuestionAnswered={(data) => {\r\n                console.log('📝 onQuestionAnswered called:', data);\r\n                \r\n                // IMMEDIATE state update - don't wait for events\r\n                if (data.systemId && data.answeredCount !== undefined) {\r\n                  setSystemStates((prev) => {\r\n                    const currentState = prev[data.systemId] || { status: \"not-started\", progress: 0, latestResult: null, answeredCount: 0 };\r\n                    const hasExistingResult = currentState.latestResult;\r\n                    const newStatus = hasExistingResult ? \"completed\" : \r\n                                    data.answeredCount > 0 ? \"ready-to-run\" : \"not-started\";\r\n                    \r\n                    console.log(`🚀 IMMEDIATE update ${data.systemId}: ${currentState.answeredCount} -> ${data.answeredCount}`);\r\n                    \r\n                    return {\r\n                      ...prev,\r\n                      [data.systemId]: {\r\n                        ...currentState,\r\n                        answeredCount: data.answeredCount,\r\n                        status: newStatus,\r\n                        lastUpdate: Date.now()\r\n                      }\r\n                    };\r\n                  });\r\n                }\r\n                \r\n                // Emit real-time progress event with enhanced data\r\n                window.dispatchEvent(new CustomEvent(\"conseqx:assessment:question-answered\", { \r\n                  detail: {\r\n                    ...data,\r\n                    orgId,\r\n                    timestamp: Date.now()\r\n                  }\r\n                }));\r\n              }}\r\n              onSystemStart={(systemId) => {\r\n                // Emit system start event\r\n                window.dispatchEvent(new CustomEvent(\"conseqx:assessment:start\", { \r\n                  detail: { \r\n                    systemId, \r\n                    orgId,\r\n                    timestamp: Date.now()\r\n                  } \r\n                }));\r\n              }}\r\n              showClientInfo={false}\r\n              customSystems={createAssessmentSystems()}\r\n              ceoPartnerMode={true}\r\n              orgId={orgId}\r\n              // Pass current answers to maintain state\r\n              initialAnswers={assessmentAnswers}\r\n              // Enable real-time progress tracking\r\n              enableRealTimeTracking={true}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <aside className={`rounded-xl p-3 border ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-100\"} shadow-sm`}>\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <div className={`text-sm font-semibold ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>Systems</div>\r\n            <div className={`${darkMode ? \"text-xs text-gray-400\" : \"text-xs text-gray-500\"} flex items-center gap-2`}>\r\n              <FaHistory /> <span>{recent.length}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            {SYSTEMS.map((s) => {\r\n              // Get current answers for real-time calculation\r\n              const currentAnswers = getCurrentAnswers();\r\n              const realTimeAnsweredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n              \r\n              const currentState = systemStates[s.id] || { \r\n                status: \"not-started\", \r\n                progress: 0, \r\n                latestResult: null, \r\n                answeredCount: 0 \r\n              };\r\n              \r\n              // Force state consistency with real-time data\r\n              const consistentState = {\r\n                ...currentState,\r\n                answeredCount: Math.max(currentState.answeredCount || 0, realTimeAnsweredCount),\r\n                status: currentState.latestResult ? \"completed\" :\r\n                        realTimeAnsweredCount > 0 ? \"ready-to-run\" : \"not-started\"\r\n              };\r\n              \r\n              return (\r\n                <SystemRow\r\n                  key={`${s.id}-${consistentState.answeredCount}-${consistentState.lastUpdate || 0}`} // Force re-render on any state change\r\n                  s={s}\r\n                  state={consistentState}\r\n                  onStart={onStart}\r\n                  onView={onView}\r\n                  onRemove={onRemove}\r\n                  darkMode={darkMode}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div className={`mt-3 border-t pt-2 ${darkMode ? \"text-xs text-gray-400 border-gray-800\" : \"text-xs text-gray-500 border-gray-200\"}`}>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className={`w-2 h-2 rounded-full ${darkMode ? \"bg-blue-500\" : \"bg-blue-600\"} animate-pulse`}></div>\r\n                <span>Real-time assessment tracking with X-Ultra intelligence</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-1\">\r\n                {Object.values(systemStates).some(state => (state.answeredCount || 0) > 0) && (\r\n                  <span className={`px-2 py-0.5 rounded-full text-xs ${darkMode ? \"bg-green-900/30 text-green-300\" : \"bg-green-100 text-green-700\"}`}>\r\n                    Active\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </aside>\r\n      </div>\r\n      \r\n  {/* Detailed Assessment Modal (mounted always, visibility controlled by isOpen) */}\r\n  <DetailedAssessmentModal isOpen={showDetailModal} />\r\n    </section>\r\n  );\r\n}\r\n","// src/pages/CEO_Dashboard/services/orgHealth/index.js\r\n// Minimal OrgHealth service: ingest assessment -> map to simple metrics -> compute score -> persist -> emit events\r\n\r\nimport { computeSystemScore } from \"./score\";\r\n\r\nconst ORG_HEALTH_KEY = \"conseqx_org_health_v1\";\r\n\r\n/**\r\n * Persist results per orgId (simple localStorage JSON).\r\n */\r\nfunction readAll() {\r\n  try {\r\n    const raw = localStorage.getItem(ORG_HEALTH_KEY);\r\n    return raw ? JSON.parse(raw) : {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\nfunction writeAll(obj) {\r\n  try {\r\n    localStorage.setItem(ORG_HEALTH_KEY, JSON.stringify(obj));\r\n  } catch {}\r\n}\r\n\r\n/**\r\n * Save a single computed system result\r\n */\r\nexport function saveResult(orgId, result) {\r\n  if (!orgId) orgId = \"anon\";\r\n  const all = readAll();\r\n  const arr = all[orgId] || [];\r\n  // Prepend newest\r\n  arr.unshift(result);\r\n  all[orgId] = arr.slice(0, 300); // keep a cap\r\n  writeAll(all);\r\n\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(\"conseqx:orghealth:completed\", { detail: { orgId, result } }));\r\n  } catch {}\r\n}\r\n\r\n/**\r\n * Basic mapping: convert an assessment result into metrics for a given system.\r\n * This is intentionally simple and deterministic.\r\n *\r\n * result: normalized assessment object (see Assessments.js normalized variable)\r\n */\r\nexport function ingestAssessment(result = {}) {\r\n  try {\r\n    const orgId = result.orgId || \"anon\";\r\n    const systemId = result.systemId || result.system || \"general\";\r\n\r\n    // Build example metrics by looking into result.meta and score\r\n    // We expect Assessment meta to include helpful keys; otherwise derive from score\r\n    const meta = result.meta || {};\r\n\r\n    // Basic normalized metrics (0..1)\r\n    // - networkDensity: prefer explicit meta.networkDensity or derive from score\r\n    // - sentiment: prefer meta.sentiment (-1..1) -> map to 0..1\r\n    // - operational: prefer meta.operational (0..1)\r\n    const networkDensity = typeof meta.networkDensity === \"number\" ? Math.max(0, Math.min(1, meta.networkDensity)) : (Number(result.score) ? Math.min(1, result.score / 100) : 0.5);\r\n    const rawSent = typeof meta.sentiment === \"number\" ? meta.sentiment : null; // expected -1..1\r\n    const sentiment = rawSent !== null ? Math.max(0, Math.min(1, (rawSent + 1) / 2)) : Math.min(1, (Number(result.score) || 0) / 100);\r\n    const operational = typeof meta.operational === \"number\" ? Math.max(0, Math.min(1, meta.operational)) : Math.min(1, (Number(result.score) || 0) / 100);\r\n\r\n    // Choose weights depending on system\r\n    const defaultWeights = { networkDensity: 0.4, sentiment: 0.3, operational: 0.3 };\r\n    let weights = defaultWeights;\r\n\r\n    // Example per-system custom weights\r\n    const systemWeights = {\r\n      interdependency: { networkDensity: 0.6, sentiment: 0.2, operational: 0.2 },\r\n      investigation: { networkDensity: 0.2, sentiment: 0.2, operational: 0.6 },\r\n      inlignment: { networkDensity: 0.2, sentiment: 0.4, operational: 0.4 },\r\n      orchestration: { networkDensity: 0.3, sentiment: 0.2, operational: 0.5 },\r\n      illustration: { networkDensity: 0.2, sentiment: 0.5, operational: 0.3 },\r\n      interpretation: { networkDensity: 0.2, sentiment: 0.5, operational: 0.3 }\r\n    };\r\n    if (systemWeights[systemId]) weights = systemWeights[systemId];\r\n\r\n    const metrics = {\r\n      networkDensity,\r\n      sentiment,\r\n      operational\r\n    };\r\n\r\n    const score = computeSystemScore(metrics, weights);\r\n\r\n    const out = {\r\n      id: result.id || `oh-${Date.now().toString(36)}`,\r\n      orgId,\r\n      systemId,\r\n      score,\r\n      breakdown: metrics,\r\n      provenance: {\r\n        sourceAssessmentId: result.id,\r\n        algorithmVersion: \"orghealth-v1\",\r\n        createdAt: Date.now()\r\n      },\r\n      timestamp: Date.now(),\r\n      // keep original result for traceability\r\n      original: {\r\n        title: result.title,\r\n        owner: result.owner,\r\n        meta: result.meta || {}\r\n      }\r\n    };\r\n\r\n    // Persist result\r\n    saveResult(orgId, out);\r\n\r\n    // Build a small recommendation stub (consumer UI can enrich or run an LLM for richer text)\r\n    const recommendation = {\r\n      id: `rec-${Date.now().toString(36)}`,\r\n      title: `Investigate ${systemId} - ${score}%`,\r\n      summary: `System ${systemId} received a score of ${score}%. Key drivers: ${Object.entries(metrics).map(([k, v]) => `${k}=${Math.round(v * 100)}%`).join(\", \")}.`,\r\n      impact: score < 60 ? \"High — potential risk\" : score < 75 ? \"Medium\" : \"Low\",\r\n      severity: score < 60 ? \"warning\" : \"improvement\",\r\n      predictions: {\r\n        short: score < 60 ? \"Short term: Operational friction, delays.\" : \"Short term: Stable\",\r\n        mid: score < 60 ? \"Mid term: Reduced throughput if unresolved.\" : \"Mid term: Maintain improvements\",\r\n        long: \"Long term: Monitor trends\"\r\n      },\r\n      evidence: [\r\n        `Derived from assessment ${result.id}`,\r\n        ...(result.meta && result.meta.notes ? [result.meta.notes] : [])\r\n      ],\r\n      comparables: [],\r\n      recommendedMeeting: {\r\n        title: `Cross-functional sync: ${systemId}`,\r\n        urgency: score < 60 ? \"Urgent\" : \"High\",\r\n        attendees: [\"Head of Product\", \"Head of Engineering\", \"Ops Lead\"],\r\n        proposedDurationMin: 45,\r\n        agenda: [\"Review findings\", \"Assign owners\", \"Agree next steps\"]\r\n      },\r\n      source: `Assessment: ${systemId}`,\r\n      createdAt: Date.now()\r\n    };\r\n\r\n    // Emit recommendation event for UI to pick up\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:orghealth:recommendation\", { detail: { orgId, recommendations: [recommendation] } }));\r\n    } catch {}\r\n\r\n    return out;\r\n  } catch (e) {\r\n    // swallow errors (non-fatal) — real service should surface logs\r\n    console.error(\"orgHealth.ingestAssessment error\", e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Return persisted results for an org\r\n */\r\nexport function getResults(orgId) {\r\n  const all = readAll();\r\n  return all[orgId] || [];\r\n}\r\n","// src/pages/CEO_Dashboard/services/orgHealth/score.js\r\n// Small deterministic scoring util for organizational health systems.\r\n// Keep calculations simple and auditable.\r\n\r\nexport function computeSystemScore(metrics = {}, weights = {}) {\r\n  // metrics: { metricKey: valueBetween0And1, ... }\r\n  // weights: { metricKey: weight, ... }\r\n  const weightKeys = Object.keys(weights);\r\n  if (weightKeys.length === 0) {\r\n    // If no weights provided, average metrics\r\n    const vals = Object.values(metrics);\r\n    if (vals.length === 0) return 0;\r\n    const avg = vals.reduce((s, v) => s + (Number(v) || 0), 0) / vals.length;\r\n    return Math.round(avg * 100);\r\n  }\r\n\r\n  const sumWeights = weightKeys.reduce((s, k) => s + (Number(weights[k]) || 0), 0) || 1;\r\n  const raw = weightKeys.reduce((acc, k) => {\r\n    const v = Number(metrics[k]) || 0;\r\n    const w = Number(weights[k]) || 0;\r\n    return acc + v * w;\r\n  }, 0);\r\n  const normalized = raw / sumWeights;\r\n  return Math.round(Math.max(0, Math.min(1, normalized)) * 100);\r\n}\r\n"],"names":["EVENT_NAMES","start","progress","completed","view","emitAssessmentStart","_ref","orgId","systemId","window","dispatchEvent","CustomEvent","detail","_unused","emitAssessmentProgress","_ref2","result","_unused2","emitAssessmentCompleted","resultObject","_unused3","SYSTEMS","getSystemsForUI","STORAGE_KEY","ANSWERS_STORAGE_KEY","PROGRESS_STORAGE_KEY","readAll","raw","localStorage","getItem","JSON","parse","writeAll","obj","setItem","stringify","summarizeSystems","bySys","arguments","length","undefined","forEach","r","k","normalizeSystemKey","timestamp","_objectSpread","Object","keys","map","score","readAssessmentProgress","_unused5","calculateAnsweredCount","allAnswers","console","log","concat","totalAnswered","system","assessmentSystems","find","s","id","subAssessments","subAssessment","subAnswers","answered","filter","key","answer","ProgressBar","pct","darkMode","containerBg","fillClass","_jsx","className","children","style","width","AnalysisLoadingIndicator","systemTitle","_jsxs","background","backgroundSize","animation","Array","_","i","animationDelay","jsx","SystemRow","_ref3","_state$latestResult$s","_state$latestResult","state","onStart","onView","onRemove","hasAnswers","answeredCount","muted","latestResult","isAssessmentCompleted","status","hasRunCompleted","Date","now","rowBgHover","titleColor","metaColor","isRunning","canRun","runDisabled","runBtnBase","viewDisabled","viewBtnBase","progressPct","sys","totalQuestions","reduce","sum","sub","questions","Math","round","icon","title","toLocaleString","onClick","disabled","_Fragment","FaPlay","size","FaEye","FaTrash","CEOAssessments","org","user","useOutletContext","useEffect","_unused7","recent","setRecent","useState","_unused8","systemStates","setSystemStates","persistentAnswers","readAssessmentAnswers","init","b","assessmentAnswers","setAssessmentAnswers","currentAssessmentSystem","setCurrentAssessmentSystem","showDetailModal","setShowDetailModal","selectedSystemDetails","setSelectedSystemDetails","realTimeProgress","setRealTimeProgress","handleClose","useCallback","setTimeout","assessmentAnswersRef","useRef","getCurrentAnswers","current","persistAndBroadcast","newList","all","byLatest","currentAnswers","prev","next","assessments","_unused9","bc","BroadcastChannel","postMessage","type","close","_unused0","handleAssessmentComplete","normalized","toString","name","Number","owner","meta","notes","max","arr","x","slice","addAssessmentForOrg","assessment","_unused1","orgHealth","e","error","cur","events","ticker","setInterval","min","random","clearInterval","svc","simulateRunIfNoHandler","warn","systemDetails","_sysDef$subAssessment","_sysDef$subAssessment2","_selectedSystemDetail","sysDef","perSubAnswers","subProgress","total","a","details","answers","_unused10","removeAssessmentForOrg","currentState","newStatus","lastUpdate","onCompleted","onProgress","_e$detail","nextState","onAssessmentStart","onQuestionAnswered","questionId","realAnsweredCount","updated","data","_unused6","writeAssessmentProgress","hasExistingResult","addEventListener","removeEventListener","ev","msgOrg","payload","syncFromStorage","persistentProgress","handleStorageChange","syncInterval","hasActiveAssessment","values","some","handleBeforeUnload","preventDefault","returnValue","kpis","useMemo","_recent$","count","avgScore","lastRun","DetailedAssessmentModal","_ref4","_selectedSystemDetail2","isOpen","caseStudy","company","challenge","toLowerCase","solution","keyLessons","AnimatePresence","motion","div","initial","opacity","animate","exit","scale","stopPropagation","FaTimes","index","FaCheckCircle","entries","_ref5","qid","val","FaLightbulb","rec","FaBuilding","lesson","Assessment","onComplete","res","onAnswersChange","_unused4","writeAssessmentAnswers","onSystemStart","showClientInfo","customSystems","ceoPartnerMode","initialAnswers","enableRealTimeTracking","FaHistory","realTimeAnsweredCount","consistentState","ORG_HEALTH_KEY","saveResult","unshift","ingestAssessment","networkDensity","rawSent","sentiment","operational","weights","systemWeights","interdependency","investigation","inlignment","orchestration","illustration","interpretation","metrics","weightKeys","vals","avg","v","sumWeights","acc","computeSystemScore","out","breakdown","provenance","sourceAssessmentId","algorithmVersion","createdAt","original","recommendation","summary","join","impact","severity","predictions","short","mid","long","evidence","comparables","recommendedMeeting","urgency","attendees","proposedDurationMin","agenda","source","recommendations","getResults"],"sourceRoot":""}
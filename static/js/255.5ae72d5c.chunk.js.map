{"version":3,"file":"static/js/255.5ae72d5c.chunk.js","mappings":"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","sources":["pages/CEO_Dashboard/constants/systems.js","pages/CEO_Dashboard/lib/scoring.js","pages/CEO_Dashboard/services/mockService.js","pages/CEO_Dashboard/services/apiService.js","pages/CEO_Dashboard/services/serviceSelector.js"],"sourcesContent":["/**\r\n * Canonical Systems for C-Suite Partner Dashboard\r\n * \r\n * Defines the six core systems that form the assessment framework,\r\n * display metadata, and legacy key mapping for backwards compatibility.\r\n */\r\n\r\n// Six canonical systems with display metadata\r\nexport const CANONICAL_SYSTEMS = [\r\n  {\r\n    key: 'interdependency',\r\n    title: 'Interdependency',\r\n    description: 'Cross-functional collaboration and dependency management',\r\n    icon: '🔗',\r\n    color: '#3B82F6', // blue-500\r\n    order: 1\r\n  },\r\n  {\r\n    key: 'iteration',\r\n    title: 'Iteration',\r\n    description: 'Development cycles, sprint planning, and continuous improvement',\r\n    icon: '�',\r\n    color: '#10B981', // emerald-500\r\n    order: 2\r\n  },\r\n  {\r\n    key: 'investigation',\r\n    title: 'Investigation',\r\n    description: 'Data analysis, research, and discovery processes',\r\n    icon: '�',\r\n    color: '#F59E0B', // amber-500\r\n    order: 3\r\n  },\r\n  {\r\n    key: 'interpretation',\r\n    title: 'Interpretation',\r\n    description: 'Insight generation, decision-making, and strategic analysis',\r\n    icon: '💡',\r\n    color: '#8B5CF6', // violet-500\r\n    order: 4\r\n  },\r\n  {\r\n    key: 'illustration',\r\n    title: 'Illustration',\r\n    description: 'Communication, visualization, and knowledge sharing',\r\n    icon: '�',\r\n    color: '#EF4444', // red-500\r\n    order: 5\r\n  },\r\n  {\r\n    key: 'alignment',\r\n    title: 'Alignment',\r\n    description: 'Strategic coordination, goal setting, and organizational coherence',\r\n    icon: '🎯',\r\n    color: '#06B6D4', // cyan-500\r\n    order: 6\r\n  }\r\n];\r\n\r\n// Legacy system keys mapping to canonical keys for backwards compatibility\r\n// TODO: Remove legacy mappings after migration period (6 months)\r\nexport const LEGACY_TO_CANONICAL = {\r\n  // Legacy keys that need normalization\r\n  'orchestration': 'alignment',\r\n  'inlignment': 'alignment', // typo in legacy data\r\n  'alignment': 'alignment',\r\n  \r\n  // Ensure canonical keys map to themselves\r\n  'interdependency': 'interdependency',\r\n  'iteration': 'iteration',\r\n  'investigation': 'investigation',\r\n  'interpretation': 'interpretation',\r\n  'illustration': 'illustration',\r\n  \r\n  // Additional legacy variations that might exist\r\n  'dependency': 'interdependency',\r\n  'dependencies': 'interdependency',\r\n  'analysis': 'investigation',\r\n  'research': 'investigation',\r\n  'insights': 'interpretation',\r\n  'reporting': 'illustration',\r\n  'visualization': 'illustration',\r\n  'coordination': 'alignment',\r\n  'strategy': 'alignment'\r\n};\r\n\r\n/**\r\n * Normalize a system key from legacy format to canonical format\r\n * @param {string} systemKey - Raw system key (possibly legacy)\r\n * @returns {string} Canonical system key\r\n */\r\nexport function normalizeSystemKey(systemKey) {\r\n  if (!systemKey || typeof systemKey !== 'string') {\r\n    return 'investigation'; // Default fallback\r\n  }\r\n  \r\n  const normalized = systemKey.toLowerCase().trim();\r\n  return LEGACY_TO_CANONICAL[normalized] || normalized;\r\n}\r\n\r\n/**\r\n * Get system metadata by canonical key\r\n * @param {string} systemKey - Canonical system key\r\n * @returns {object|null} System metadata or null if not found\r\n */\r\nexport function getSystemMetadata(systemKey) {\r\n  const canonical = normalizeSystemKey(systemKey);\r\n  return CANONICAL_SYSTEMS.find(s => s.key === canonical) || null;\r\n}\r\n\r\n/**\r\n * Get all systems formatted for UI display (sorted by order)\r\n * @returns {Array} Systems with UI metadata\r\n */\r\nexport function getSystemsForUI() {\r\n  return CANONICAL_SYSTEMS\r\n    .sort((a, b) => a.order - b.order)\r\n    .map(system => ({\r\n      id: system.key,\r\n      key: system.key,\r\n      title: system.title,\r\n      description: system.description,\r\n      icon: system.icon,\r\n      color: system.color\r\n    }));\r\n}\r\n\r\n/**\r\n * Validate if a system key is canonical\r\n * @param {string} systemKey - System key to validate\r\n * @returns {boolean} True if canonical, false otherwise\r\n */\r\nexport function isCanonicalSystem(systemKey) {\r\n  return CANONICAL_SYSTEMS.some(s => s.key === systemKey);\r\n}\r\n\r\n// Default system weights for org health calculation\r\n// TODO: Make these configurable per organization\r\nexport const DEFAULT_SYSTEM_WEIGHTS = {\r\n  'interdependency': 0.18,\r\n  'iteration': 0.20,\r\n  'investigation': 0.16,\r\n  'interpretation': 0.18,\r\n  'illustration': 0.14,\r\n  'alignment': 0.14\r\n};\r\n\r\n// Ensure weights sum to 1.0\r\nconst weightSum = Object.values(DEFAULT_SYSTEM_WEIGHTS).reduce((sum, w) => sum + w, 0);\r\nif (Math.abs(weightSum - 1.0) > 0.001) {\r\n  console.warn(`[systems.js] System weights sum to ${weightSum.toFixed(3)}, should be 1.0`);\r\n}\r\n\r\n// Organizational Health Framework Metadata\r\n// This positions our tool as an \"organizational doctor\" that provides\r\n// automated diagnosis beyond what ERP/BI platforms offer\r\nexport const FRAMEWORK_METADATA = {\r\n  name: 'ConseQ-X Organizational Health Assessment',\r\n  version: '1.0',\r\n  description: 'Automated organizational health analysis across six holistic systems',\r\n  differentiators: [\r\n    'Holistic organizational diagnosis beyond operational metrics',\r\n    'Automated analysis and recommendations vs manual BI configuration', \r\n    'Predictive and prescriptive insights vs descriptive reporting',\r\n    'Cultural and behavioral factors integrated with operational data',\r\n    'Purpose-built for organizational effectiveness vs generic analytics'\r\n  ],\r\n  targetGap: 'Bridges the space between operational ERP/BI data and strategic consulting insights',\r\n  useCases: [\r\n    'Post-merger integration assessment',\r\n    'Organizational transformation tracking',\r\n    'Performance turnaround monitoring',\r\n    'Continuous health monitoring for SMEs',\r\n    'Government agency effectiveness measurement'\r\n  ]\r\n};\r\n\r\n// Value proposition vs traditional platforms\r\nexport const COMPETITIVE_ADVANTAGES = {\r\n  vsERP: [\r\n    'Analyzes intangible dynamics like culture and collaboration',\r\n    'Provides narrative insights beyond transactional data',\r\n    'Ready-made organizational health model vs complex customization'\r\n  ],\r\n  vsBI: [\r\n    'Purpose-built framework vs empty canvas requiring expertise',\r\n    'Automated interpretation and recommendations vs manual analysis',\r\n    'Integrated organizational model vs piecemeal dashboard building'\r\n  ],\r\n  vsConsulting: [\r\n    'Continuous monitoring vs one-off assessments',\r\n    'Affordable software vs expensive consulting engagements',\r\n    'Real-time insights vs periodic reports'\r\n  ]\r\n};\r\n","// Deterministic scoring module (pure functions)\r\n\r\nfunction clip01(x) {\r\n  if (Number.isNaN(x) || !Number.isFinite(x)) return 0;\r\n  return Math.max(0, Math.min(1, x));\r\n}\r\n\r\nfunction clip100(x) {\r\n  if (Number.isNaN(x) || !Number.isFinite(x)) return 0;\r\n  return Math.max(0, Math.min(100, x));\r\n}\r\n\r\n// Normalize a single metric into 0..100. If value seems already 0..1, scale; else clip 0..100.\r\nexport function normalizeMetric(value) {\r\n  if (value == null) return null;\r\n  const n = Number(value);\r\n  if (!Number.isFinite(n)) return null;\r\n  if (n >= 0 && n <= 1) return Math.round(n * 100);\r\n  return Math.round(clip100(n));\r\n}\r\n\r\nexport function scoreSystem(metrics = {}, weights = {}, requiredMetrics) {\r\n  const keys = Object.keys(metrics || {});\r\n  if (!keys.length) {\r\n    return { score: 0, coverage: 0, inputMetrics: {}, rationale: { top: [], text: \"No data\" } };\r\n  }\r\n\r\n  // normalize metrics\r\n  const norm = {};\r\n  keys.forEach((k) => {\r\n    const v = normalizeMetric(metrics[k]);\r\n    if (v != null) norm[k] = v; // keep only valid\r\n  });\r\n\r\n  const usedKeys = Object.keys(norm);\r\n  if (!usedKeys.length) {\r\n    return { score: 0, coverage: 0, inputMetrics: {}, rationale: { top: [], text: \"No valid metrics\" } };\r\n  }\r\n\r\n  // coverage\r\n  let coverage = 0;\r\n  if (Array.isArray(requiredMetrics) && requiredMetrics.length) {\r\n    const present = requiredMetrics.filter((k) => norm[k] != null).length;\r\n    coverage = requiredMetrics.length ? present / requiredMetrics.length : 0;\r\n  } else {\r\n    const present = usedKeys.length;\r\n    const total = keys.length;\r\n    coverage = total ? present / total : 0;\r\n  }\r\n\r\n  // weights default equal\r\n  const w = {};\r\n  let wsum = 0;\r\n  usedKeys.forEach((k) => {\r\n    const wk = weights[k] == null ? 1 : Number(weights[k]);\r\n    w[k] = wk;\r\n    wsum += wk;\r\n  });\r\n  if (wsum <= 0) {\r\n    usedKeys.forEach((k) => (w[k] = 1));\r\n    wsum = usedKeys.length;\r\n  }\r\n\r\n  // weighted mean and clip to 0..100\r\n  let acc = 0;\r\n  usedKeys.forEach((k) => {\r\n    acc += (norm[k] || 0) * (w[k] || 0);\r\n  });\r\n  const mean = acc / wsum;\r\n  const score = Math.round(clip100(mean));\r\n\r\n  // rationale: top 2 contributors by (metric*weight)\r\n  const contribs = usedKeys\r\n    .map((k) => ({ key: k, value: norm[k], weighted: (norm[k] || 0) * (w[k] || 0) }))\r\n    .sort((a, b) => b.weighted - a.weighted);\r\n  const top = contribs.slice(0, 2);\r\n  const text = top.length\r\n    ? `Top drivers: ${top.map((t) => `${t.key} (${t.value})`).join(\", \")}`\r\n    : \"No strong drivers\";\r\n\r\n  return { score, coverage: Number(coverage.toFixed(3)), inputMetrics: norm, rationale: { top, text } };\r\n}\r\n\r\nexport function computeOrgHealth(systemScores = [], systemWeights = {}) {\r\n  if (!Array.isArray(systemScores) || !systemScores.length) return { orgHealth: 0, confidence: 0, breakdown: [] };\r\n  let acc = 0;\r\n  let wsum = 0;\r\n  const breakdown = systemScores.map(({ key, score, coverage }) => {\r\n    const w = systemWeights[key] == null ? 1 : Number(systemWeights[key]);\r\n    acc += (Number(score) || 0) * w;\r\n    wsum += w;\r\n    return { key, score: clip100(Number(score) || 0), coverage: clip01(Number(coverage) || 0) };\r\n  });\r\n  if (wsum <= 0) wsum = systemScores.length;\r\n  const orgHealth = Math.round(clip100(acc / wsum));\r\n  const coverageAvg = breakdown.reduce((s, x) => s + (x.coverage || 0), 0) / breakdown.length;\r\n  const confidence = Math.min(1, 0.5 + 0.5 * coverageAvg);\r\n  return { orgHealth, confidence: Number(confidence.toFixed(3)), breakdown };\r\n}\r\n\r\nexport function explain(metrics = {}, weights = {}) {\r\n  const keys = Object.keys(metrics || {});\r\n  const norm = {};\r\n  keys.forEach((k) => {\r\n    const v = normalizeMetric(metrics[k]);\r\n    if (v != null) norm[k] = v;\r\n  });\r\n  const used = Object.keys(norm);\r\n  const contribs = used\r\n    .map((k) => ({ key: k, value: norm[k], weighted: (norm[k] || 0) * (Number(weights[k] ?? 1)) }))\r\n    .sort((a, b) => b.weighted - a.weighted);\r\n  const top = contribs.slice(0, 3);\r\n  return { top, deltas: contribs.map(({ key, value }) => ({ key, delta: value - 50 })) };\r\n}\r\n\r\nexport default {\r\n  normalizeMetric,\r\n  scoreSystem,\r\n  computeOrgHealth,\r\n  explain,\r\n};\r\n","import { scoreSystem, computeOrgHealth } from \"../lib/scoring\";\r\nimport { normalizeSystemKey, CANONICAL_SYSTEMS } from \"../constants/systems\";\r\n\r\nconst STORAGE_KEY = \"conseqx_assessments_v1\";\r\nconst FIXTURE_ORG_KEY = \"CEO_DB_FIXTURES_ORG\";\r\n\r\nfunction readAll() {\r\n  try {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\nfunction writeAll(obj) {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(obj));\r\n  } catch {}\r\n}\r\n\r\nfunction makeRunId(prefix = \"A-run\") {\r\n  const d = new Date();\r\n  const pad = (n, w = 2) => n.toString().padStart(w, \"0\");\r\n  const stamp = `${d.getFullYear()}${pad(d.getMonth() + 1)}${pad(d.getDate())}-${pad(d.getHours())}${pad(d.getMinutes())}`;\r\n  const rand = Math.abs(hashCode(`${prefix}-${stamp}`)).toString(36).slice(0, 4).toUpperCase();\r\n  return `${prefix}-${stamp}-${rand}`;\r\n}\r\n\r\nfunction hashCode(str) {\r\n  let h = 0;\r\n  for (let i = 0; i < str.length; i++) h = (h * 31 + str.charCodeAt(i)) | 0;\r\n  return h;\r\n}\r\n\r\nfunction deterministicSystemMetrics(orgId, systemId) {\r\n  // Simple deterministic pseudo-metrics seeded by org+system\r\n  const seed = `${orgId}::${systemId}`;\r\n  const h = Math.abs(hashCode(seed));\r\n  // 3-5 metrics in 0..100\r\n  const m1 = 55 + (h % 41);\r\n  const m2 = 50 + ((h >> 3) % 46);\r\n  const m3 = 45 + ((h >> 5) % 50);\r\n  const m4 = 40 + ((h >> 7) % 55);\r\n  return { throughput: m1, cycle_time: m2, quality: m3, predictability: m4 };\r\n}\r\n\r\n// Organizational Health Insights - demonstrating our competitive advantage over ERP/BI\r\nfunction generateOrganizationalHealthInsights(latestBySys, orgHealth, confidence) {\r\n  const systems = Object.keys(latestBySys);\r\n  const scores = systems.map(s => latestBySys[s].score || 0);\r\n  const avgScore = scores.length ? scores.reduce((a, b) => a + b) / scores.length : 0;\r\n  \r\n  // Cultural and behavioral insights (not available in ERP/BI)\r\n  const cultural_factors = {\r\n    collaboration_index: Math.round((latestBySys.interdependency?.score || 50) * 0.8 + (latestBySys.alignment?.score || 50) * 0.2),\r\n    innovation_velocity: Math.round((latestBySys.iteration?.score || 50) * 0.7 + (latestBySys.investigation?.score || 50) * 0.3),\r\n    communication_effectiveness: latestBySys.illustration?.score || 50,\r\n    decision_quality: latestBySys.interpretation?.score || 50,\r\n    overall_culture_health: Math.round(avgScore * 0.9 + confidence * 100 * 0.1)\r\n  };\r\n  \r\n  // Cross-system dependency analysis (unique to our platform)\r\n  const dependencies = systems.map(sys => {\r\n    const impactedBy = systems.filter(other => other !== sys && Math.abs((latestBySys[sys]?.score || 50) - (latestBySys[other]?.score || 50)) < 15);\r\n    return {\r\n      system: sys,\r\n      depends_on: impactedBy,\r\n      impact_strength: impactedBy.length > 0 ? 'high' : 'medium',\r\n      bottleneck_risk: (latestBySys[sys]?.score || 50) < 40 ? 'critical' : 'low'\r\n    };\r\n  });\r\n  \r\n  // AI-driven recommendations (automated insights vs manual BI analysis)\r\n  const recommendations = [\r\n    {\r\n      insight_id: \"rec-001\",\r\n      action: orgHealth < 60 ? \"Focus on foundational systems: Investigation and Alignment need immediate attention\" : \"Optimize high-performing areas for maximum impact\",\r\n      owner: orgHealth < 60 ? \"Chief Operating Officer\" : \"Strategic Planning Team\",\r\n      priority: orgHealth < 60 ? \"critical\" : \"normal\",\r\n      expected_impact: \"+8-12% org health\",\r\n      reasoning: `Based on cross-system analysis, ${orgHealth < 60 ? 'foundational gaps' : 'optimization opportunities'} detected`\r\n    },\r\n    {\r\n      insight_id: \"rec-002\", \r\n      action: cultural_factors.collaboration_index < 60 ? \"Implement cross-team collaboration protocols\" : \"Scale successful collaboration patterns across organization\",\r\n      owner: \"Head of People & Culture\",\r\n      priority: cultural_factors.collaboration_index < 60 ? \"high\" : \"medium\",\r\n      expected_impact: \"+5-8% collaboration effectiveness\",\r\n      reasoning: `Collaboration index at ${cultural_factors.collaboration_index}% indicates ${cultural_factors.collaboration_index < 60 ? 'improvement needed' : 'scaling opportunity'}`\r\n    }\r\n  ];\r\n  \r\n  // Risk identification (predictive capability)\r\n  const risk_areas = systems.filter(s => (latestBySys[s]?.score || 0) < 45).map(s => ({\r\n    system: s,\r\n    risk_level: (latestBySys[s]?.score || 0) < 30 ? 'critical' : 'moderate',\r\n    impact_radius: dependencies.find(d => d.system === s)?.depends_on.length || 0,\r\n    mitigation_timeline: (latestBySys[s]?.score || 0) < 30 ? '30 days' : '60 days'\r\n  }));\r\n  \r\n  // Improvement opportunities (prescriptive insights)\r\n  const opportunities = systems.filter(s => (latestBySys[s]?.score || 0) > 70).map(s => ({\r\n    system: s,\r\n    leverage_potential: 'high',\r\n    suggested_action: `Use ${s} strength to boost interconnected systems`,\r\n    roi_estimate: '3-5x investment'\r\n  }));\r\n  \r\n  // Transformation readiness score (unique organizational capability assessment)\r\n  const transformation_score = Math.round(\r\n    (cultural_factors.collaboration_index * 0.3 + \r\n     cultural_factors.innovation_velocity * 0.25 + \r\n     avgScore * 0.35 + \r\n     confidence * 100 * 0.1)\r\n  );\r\n  \r\n  return {\r\n    cultural_factors,\r\n    dependencies,\r\n    recommendations,\r\n    risk_areas,\r\n    opportunities,\r\n    transformation_score\r\n  };\r\n}\r\n\r\nfunction calculateDeltaMoM(runs, systemKey) {\r\n  const systemRuns = runs.filter(r => normalizeSystemKey(r.systemId) === systemKey)\r\n    .sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));\r\n  \r\n  if (systemRuns.length < 2) return 0;\r\n  \r\n  const latest = systemRuns[0].score || 0;\r\n  const previous = systemRuns[1].score || 0;\r\n  return Number((latest - previous).toFixed(1));\r\n}\r\n\r\nfunction generateHealthIndicators(systemKey, latest) {\r\n  const score = latest.score || 0;\r\n  const indicators = [];\r\n  \r\n  if (score > 80) indicators.push('excellent_performance');\r\n  if (score > 60) indicators.push('above_average');\r\n  if (score < 40) indicators.push('needs_attention');\r\n  if (score < 25) indicators.push('critical_risk');\r\n  \r\n  // System-specific indicators based on our organizational health model\r\n  switch(systemKey) {\r\n    case 'interdependency':\r\n      if (score > 70) indicators.push('strong_collaboration');\r\n      if (score < 50) indicators.push('siloed_operations');\r\n      break;\r\n    case 'iteration':\r\n      if (score > 70) indicators.push('agile_culture');\r\n      if (score < 50) indicators.push('slow_adaptation');\r\n      break;\r\n    case 'investigation':\r\n      if (score > 70) indicators.push('data_driven');\r\n      if (score < 50) indicators.push('limited_insights');\r\n      break;\r\n    case 'interpretation':\r\n      if (score > 70) indicators.push('strategic_clarity');\r\n      if (score < 50) indicators.push('decision_gaps');\r\n      break;\r\n    case 'illustration':\r\n      if (score > 70) indicators.push('clear_communication');\r\n      if (score < 50) indicators.push('information_bottlenecks');\r\n      break;\r\n    case 'alignment':\r\n      if (score > 70) indicators.push('unified_direction');\r\n      if (score < 50) indicators.push('misaligned_goals');\r\n      break;\r\n  }\r\n  \r\n  return indicators;\r\n}\r\n\r\nfunction identifyRiskFactors(systemKey, score) {\r\n  const risks = [];\r\n  \r\n  if (score < 40) {\r\n    risks.push({\r\n      factor: 'performance_degradation',\r\n      severity: score < 25 ? 'critical' : 'high',\r\n      impact: 'Significant impact on organizational effectiveness'\r\n    });\r\n  }\r\n  \r\n  if (score < 60) {\r\n    risks.push({\r\n      factor: 'below_benchmark',\r\n      severity: 'medium',\r\n      impact: 'Operating below organizational potential'\r\n    });\r\n  }\r\n  \r\n  return risks;\r\n}\r\n\r\nexport async function runAssessment(orgId, systemKey, options = {}) {\r\n  const systemId = normalizeSystemKey(systemKey);\r\n  const nowISO = new Date().toISOString();\r\n  const metrics = deterministicSystemMetrics(orgId || \"anon\", systemId);\r\n  const weights = { throughput: 1, cycle_time: 1, quality: 1, predictability: 1 };\r\n  const { score, coverage, rationale } = scoreSystem(metrics, weights);\r\n  const result = {\r\n    id: makeRunId(\"A\"),\r\n    systemId,\r\n    title: `${(CANONICAL_SYSTEMS.find((s) => s.key === systemId) || {}).title || systemId} Assessment`,\r\n    score,\r\n    coverage,\r\n    timestamp: Date.now(),\r\n    orgId: orgId || \"anon\",\r\n    meta: { simulated: true, rationale, metrics, weights },\r\n  };\r\n\r\n  // persist to localStorage list for org\r\n  const all = readAll();\r\n  const arr = all[result.orgId] || [];\r\n  all[result.orgId] = [result, ...arr].slice(0, 200);\r\n  writeAll(all);\r\n\r\n  // broadcast update\r\n  try {\r\n    if (\"BroadcastChannel\" in window) {\r\n      const bc = new BroadcastChannel(\"conseqx_assessments\");\r\n      bc.postMessage({ type: \"assessments:update\", orgId: result.orgId, payload: all[result.orgId] });\r\n      bc.close();\r\n    }\r\n  } catch {}\r\n\r\n  return result;\r\n}\r\n\r\nexport async function getDashboardSummary(orgId) {\r\n  // Aggregate latest per system and compute org health\r\n  const all = readAll();\r\n  const list = all[orgId] || [];\r\n  const bySys = {};\r\n  list.forEach((r) => {\r\n    const k = normalizeSystemKey(r.systemId);\r\n    if (!bySys[k] || (bySys[k].timestamp || 0) < (r.timestamp || 0)) bySys[k] = r;\r\n  });\r\n  const systemScores = Object.keys(bySys).map((key) => ({ key, score: bySys[key].score || 0, coverage: bySys[key].coverage ?? 1 }));\r\n  // default equal weights\r\n  const { orgHealth, confidence, breakdown } = computeOrgHealth(systemScores);\r\n\r\n  // light north star & recs from fixtures or defaults\r\n  let north_star = \"Increase on-time delivery by 15%\";\r\n  try {\r\n    const fixture = JSON.parse(localStorage.getItem(FIXTURE_ORG_KEY) || \"null\");\r\n    if (fixture?.north_star) north_star = fixture.north_star;\r\n  } catch {}\r\n\r\n  const systems = CANONICAL_SYSTEMS.map((s) => {\r\n    const latest = bySys[s.key] || null;\r\n    return {\r\n      key: s.key,\r\n      title: s.title,\r\n      score: latest?.score || null,\r\n      delta_mom: latest ? calculateDeltaMoM(list, s.key) : 0,\r\n      top_insight_id: latest ? `ins-${s.key}-001` : null,\r\n      health_indicators: latest ? generateHealthIndicators(s.key, latest) : [],\r\n      risk_factors: latest ? identifyRiskFactors(s.key, latest.score) : []\r\n    };\r\n  });\r\n\r\n  // Generate organizational health insights that demonstrate our competitive advantage\r\n  const insights = generateOrganizationalHealthInsights(bySys, orgHealth, confidence);\r\n\r\n  const top_recommendations = insights.recommendations;\r\n\r\n  return {\r\n    org_id: orgId,\r\n    run_id: makeRunId(\"DASH\"),\r\n    date: new Date().toISOString(),\r\n    org_health: orgHealth,\r\n    confidence,\r\n    \r\n    // Enhanced north star with trend analysis\r\n    north_star: {\r\n      name: north_star,\r\n      value: (orgHealth / 100 * 1.2).toFixed(2),\r\n      unit: \"x\",\r\n      trend: orgHealth > 70 ? \"improving\" : orgHealth > 50 ? \"stable\" : \"needs_attention\"\r\n    },\r\n    \r\n    systems,\r\n    top_recommendations,\r\n    \r\n    // Unique organizational insights that demonstrate our USP over ERP/BI\r\n    organizational_insights: insights.cultural_factors,\r\n    cross_system_dependencies: insights.dependencies,\r\n    transformation_readiness: insights.transformation_score,\r\n    \r\n    // Predictive capabilities (competitive advantage)\r\n    health_forecast: {\r\n      next_30_days: Math.min(100, orgHealth + (confidence > 0.8 ? 2 : -1)),\r\n      risk_areas: insights.risk_areas,\r\n      improvement_opportunities: insights.opportunities\r\n    },\r\n    \r\n    // Meta information about our competitive positioning\r\n    framework_advantages: {\r\n      vs_erp: \"Provides cultural and behavioral insights beyond transactional data\",\r\n      vs_bi: \"Automated organizational diagnosis vs manual dashboard building\", \r\n      vs_consulting: \"Continuous monitoring vs periodic assessments\"\r\n    }\r\n  };\r\n}\r\n\r\nexport function simulateImpact(orgId, systemKey, changePct = 10) {\r\n  const systemId = normalizeSystemKey(systemKey);\r\n  const all = readAll();\r\n  const list = all[orgId] || [];\r\n  const bySys = {};\r\n  list.forEach((r) => {\r\n    const k = normalizeSystemKey(r.systemId);\r\n    if (!bySys[k] || (bySys[k].timestamp || 0) < (r.timestamp || 0)) bySys[k] = r;\r\n  });\r\n  const systemScores = CANONICAL_SYSTEMS.map((s) => {\r\n    const cur = bySys[s.key];\r\n    return { key: s.key, score: cur ? cur.score : 50, coverage: cur ? cur.coverage ?? 1 : 0.5 };\r\n  });\r\n  const base = computeOrgHealth(systemScores);\r\n  const boosted = systemScores.map((s) => (s.key === systemId ? { ...s, score: Math.min(100, s.score * (1 + changePct / 100)) } : s));\r\n  const after = computeOrgHealth(boosted);\r\n  return { before: base, after };\r\n}\r\n\r\nexport function loadFixtures() {\r\n  // Load org_seed.json into localStorage for quick demo data\r\n  try {\r\n    // Note: bundlers will inline JSON imports if configured; here we fetch via dynamic import fallback.\r\n    // In this environment, we simulate loading by embedding a small seed at runtime if not present.\r\n    if (!localStorage.getItem(FIXTURE_ORG_KEY)) {\r\n      const seed = {\r\n        org_id: \"org-1\",\r\n        org_name: \"Demo Org\",\r\n        north_star: \"Ship features faster with higher quality\",\r\n      };\r\n      localStorage.setItem(FIXTURE_ORG_KEY, JSON.stringify(seed));\r\n    }\r\n  } catch {}\r\n}\r\n\r\nexport default { runAssessment, getDashboardSummary, simulateImpact, loadFixtures };\r\n","// Placeholder API service scaffold. Mirror mockService API but not wired.\r\n\r\nexport async function runAssessment(orgId, systemKey, options = {}) {\r\n  return Promise.reject(new Error(\"Not wired\"));\r\n}\r\n\r\nexport async function getDashboardSummary(orgId) {\r\n  return Promise.reject(new Error(\"Not wired\"));\r\n}\r\n\r\nexport async function simulateImpact(orgId, systemKey, changePct = 10) {\r\n  return Promise.reject(new Error(\"Not wired\"));\r\n}\r\n\r\nexport async function loadFixtures() {\r\n  // no-op for API\r\n  return Promise.resolve();\r\n}\r\n\r\nexport default { runAssessment, getDashboardSummary, simulateImpact, loadFixtures };\r\n","import * as mockService from \"./mockService\";\r\nimport * as apiService from \"./apiService\";\r\n\r\nconst useApi = String(process.env.REACT_APP_USE_API || \"\").toLowerCase() === \"true\";\r\n\r\nfunction fallbackWarn(method) {\r\n  if (useApi) {\r\n    try {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`[serviceSelector] API not wired for ${method}; falling back to mockService.`);\r\n    } catch {}\r\n  }\r\n}\r\n\r\nexport async function runAssessment(orgId, systemKey) {\r\n  if (useApi) {\r\n    try {\r\n      return await apiService.runAssessment(orgId, systemKey);\r\n    } catch (e) {\r\n      fallbackWarn(\"runAssessment\");\r\n      return await mockService.runAssessment(orgId, systemKey);\r\n    }\r\n  }\r\n  return await mockService.runAssessment(orgId, systemKey);\r\n}\r\n\r\nexport async function getDashboardSummary(orgId) {\r\n  if (useApi) {\r\n    try {\r\n      return await apiService.getDashboardSummary(orgId);\r\n    } catch (e) {\r\n      fallbackWarn(\"getDashboardSummary\");\r\n      return await mockService.getDashboardSummary(orgId);\r\n    }\r\n  }\r\n  return await mockService.getDashboardSummary(orgId);\r\n}\r\n\r\nexport async function simulateImpact(orgId, systemKey, changePct) {\r\n  if (useApi) {\r\n    try {\r\n      return await apiService.simulateImpact(orgId, systemKey, changePct);\r\n    } catch (e) {\r\n      fallbackWarn(\"simulateImpact\");\r\n      return await mockService.simulateImpact(orgId, systemKey, changePct);\r\n    }\r\n  }\r\n  return await mockService.simulateImpact(orgId, systemKey, changePct);\r\n}\r\n\r\nexport async function loadFixtures(orgId) {\r\n  if (useApi) {\r\n    try {\r\n      return await apiService.loadFixtures(orgId);\r\n    } catch (e) {\r\n      fallbackWarn(\"loadFixtures\");\r\n      return await mockService.loadFixtures(orgId);\r\n    }\r\n  }\r\n  return await mockService.loadFixtures(orgId);\r\n}\r\n\r\nexport const __internal = { useApi };\r\n"],"names":["CANONICAL_SYSTEMS","key","title","description","icon","color","order","LEGACY_TO_CANONICAL","normalizeSystemKey","systemKey","normalized","toLowerCase","trim","getSystemsForUI","sort","a","b","map","system","id","weightSum","Object","values","reduce","sum","w","Math","abs","console","warn","concat","toFixed","clip100","x","Number","isNaN","isFinite","max","min","normalizeMetric","value","n","round","scoreSystem","metrics","arguments","length","undefined","weights","requiredMetrics","keys","score","coverage","inputMetrics","rationale","top","text","norm","forEach","k","v","usedKeys","Array","isArray","present","filter","total","wsum","wk","acc","mean","weighted","slice","t","join","computeOrgHealth","systemScores","systemWeights","orgHealth","confidence","breakdown","_ref","coverageAvg","s","STORAGE_KEY","FIXTURE_ORG_KEY","readAll","raw","localStorage","getItem","JSON","parse","_unused","makeRunId","prefix","d","Date","pad","toString","padStart","stamp","getFullYear","getMonth","getDate","getHours","getMinutes","rand","hashCode","toUpperCase","str","h","i","charCodeAt","calculateDeltaMoM","runs","systemRuns","r","systemId","timestamp","latest","previous","generateHealthIndicators","indicators","push","identifyRiskFactors","risks","factor","severity","impact","async","runAssessment","orgId","toISOString","seed","throughput","cycle_time","quality","predictability","deterministicSystemMetrics","result","find","now","meta","simulated","all","arr","obj","setItem","stringify","_unused2","writeAll","window","bc","BroadcastChannel","postMessage","type","payload","close","_unused3","getDashboardSummary","list","bySys","_bySys$key$coverage","north_star","fixture","_unused4","systems","delta_mom","top_insight_id","health_indicators","risk_factors","insights","latestBySys","_latestBySys$interdep","_latestBySys$alignmen","_latestBySys$iteratio","_latestBySys$investig","_latestBySys$illustra","_latestBySys$interpre","scores","avgScore","cultural_factors","collaboration_index","interdependency","alignment","innovation_velocity","iteration","investigation","communication_effectiveness","illustration","decision_quality","interpretation","overall_culture_health","dependencies","sys","_latestBySys$sys2","impactedBy","other","_latestBySys$sys","_latestBySys$other","depends_on","impact_strength","bottleneck_risk","recommendations","insight_id","action","owner","priority","expected_impact","reasoning","risk_areas","_latestBySys$s","_latestBySys$s2","_dependencies$find","_latestBySys$s3","risk_level","impact_radius","mitigation_timeline","opportunities","_latestBySys$s4","leverage_potential","suggested_action","roi_estimate","transformation_score","generateOrganizationalHealthInsights","top_recommendations","org_id","run_id","date","org_health","name","unit","trend","organizational_insights","cross_system_dependencies","transformation_readiness","health_forecast","next_30_days","improvement_opportunities","framework_advantages","vs_erp","vs_bi","vs_consulting","Promise","reject","Error","useApi","String","process","REACT_APP_USE_API","fallbackWarn","method","apiService","e","mockService"],"sourceRoot":""}
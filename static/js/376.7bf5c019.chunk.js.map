{"version":3,"file":"static/js/376.7bf5c019.chunk.js","mappings":"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","sources":["pages/CEO_Dashboard/lib/events.js","pages/CEO_Dashboard/CEODashboardComponents/Assessments.js","pages/CEO_Dashboard/services/orgHealth/index.js","pages/CEO_Dashboard/services/orgHealth/score.js"],"sourcesContent":["// Thin wrapper around CustomEvent to keep event names consistent and provide typed helpers\r\n\r\nexport const EVENT_NAMES = {\r\n  start: \"conseqx:assessment:start\",\r\n  progress: \"conseqx:assessment:progress\",\r\n  completed: \"conseqx:assessment:completed\",\r\n  view: \"conseqx:assessment:view\",\r\n};\r\n\r\nexport function emitAssessmentStart({ orgId, systemId }) {\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(EVENT_NAMES.start, { detail: { orgId, systemId } }));\r\n  } catch {}\r\n}\r\n\r\nexport function emitAssessmentProgress({ orgId, systemId, progress, result }) {\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(EVENT_NAMES.progress, { detail: { orgId, systemId, progress, result } }));\r\n  } catch {}\r\n}\r\n\r\nexport function emitAssessmentCompleted(resultObject) {\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(EVENT_NAMES.completed, { detail: resultObject }));\r\n  } catch {}\r\n}\r\n\r\nexport function onAssessmentStart(cb) {\r\n  const handler = (e) => cb?.(e?.detail);\r\n  window.addEventListener(EVENT_NAMES.start, handler);\r\n  return () => window.removeEventListener(EVENT_NAMES.start, handler);\r\n}\r\n\r\nexport function onAssessmentProgress(cb) {\r\n  const handler = (e) => cb?.(e?.detail);\r\n  window.addEventListener(EVENT_NAMES.progress, handler);\r\n  return () => window.removeEventListener(EVENT_NAMES.progress, handler);\r\n}\r\n\r\nexport function onAssessmentCompleted(cb) {\r\n  const handler = (e) => cb?.(e?.detail);\r\n  window.addEventListener(EVENT_NAMES.completed, handler);\r\n  return () => window.removeEventListener(EVENT_NAMES.completed, handler);\r\n}\r\n\r\nexport default {\r\n  EVENT_NAMES,\r\n  emitAssessmentStart,\r\n  emitAssessmentProgress,\r\n  emitAssessmentCompleted,\r\n  onAssessmentStart,\r\n  onAssessmentProgress,\r\n  onAssessmentCompleted,\r\n};\r\n","// src/pages/CEO_Dashboard/CEODashboardComponents/Assessments.js\r\nimport React, { useEffect, useMemo, useRef, useState, useCallback } from \"react\";\r\nimport { useOutletContext } from \"react-router-dom\";\r\nimport Assessment from \"../../../Assessment\";\r\nimport { FaHistory, FaTrash, FaPlay, FaEye, FaTimes, FaCheckCircle, FaLightbulb, FaBuilding } from \"react-icons/fa\";\r\nimport { getSystemsForUI, normalizeSystemKey } from \"../constants/systems\";\r\nimport * as events from \"../lib/events\";\r\nimport * as svc from \"../services/serviceSelector\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { systems as assessmentSystems } from \"../../../data/systems\"; // Import actual assessment systems\r\n\r\n// NEW: orgHealth service (minimal ingest + persistence + event)\r\nimport * as orgHealth from \"../services/orgHealth\";\r\n\r\n/* ---------- constants: the 6 systems (canonical) ---------- */\r\nconst SYSTEMS = getSystemsForUI();\r\n\r\n// Return the ACTUAL full assessment systems from src/data/systems.js\r\n// This ensures real-time tracking counts match the actual questions users answer\r\nfunction createAssessmentSystems() {\r\n  // Return the exact same systems that Assessment.js uses\r\n  // NO simplification - this keeps question counts synchronized\r\n  return assessmentSystems;\r\n}\r\n\r\nconst STORAGE_KEY = \"conseqx_assessments_v1\";\r\nconst ANSWERS_STORAGE_KEY = \"conseqx_assessment_answers_v1\";\r\nconst PROGRESS_STORAGE_KEY = \"conseqx_assessment_progress_v1\";\r\n// Remove ad-hoc ML hooks here; real analysis is handled via services layer when needed\r\n\r\n/* ---------- storage helpers ---------- */\r\nfunction readAll() {\r\n  try {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\nfunction writeAll(obj) {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(obj));\r\n  } catch {}\r\n}\r\nfunction addAssessmentForOrg(orgId, result, max = 200) {\r\n  if (!orgId) orgId = \"anon\";\r\n  const all = readAll();\r\n  const arr = all[orgId] || [];\r\n  const next = [{ ...result, timestamp: result.timestamp || Date.now() }, ...arr.filter((x) => x.id !== result.id)];\r\n  all[orgId] = next.slice(0, max);\r\n  writeAll(all);\r\n  return all[orgId];\r\n}\r\nfunction removeAssessmentForOrg(orgId, id) {\r\n  const all = readAll();\r\n  const arr = all[orgId] || [];\r\n  const next = arr.filter((x) => x.id !== id);\r\n  all[orgId] = next;\r\n  writeAll(all);\r\n  return next;\r\n}\r\nfunction summarizeSystems(arr = []) {\r\n  const bySys = {};\r\n  arr.forEach((r) => {\r\n    if (!r.systemId) return;\r\n    const k = normalizeSystemKey(r.systemId);\r\n    if (!bySys[k] || (bySys[k].timestamp || 0) < (r.timestamp || 0)) {\r\n      bySys[k] = { ...r, systemId: k };\r\n    }\r\n  });\r\n  return Object.keys(bySys).map((k) => ({ systemId: k, score: bySys[k].score || 0, result: bySys[k] }));\r\n}\r\n\r\n// Helper functions for persistent assessment state\r\nfunction readAssessmentAnswers(orgId) {\r\n  try {\r\n    const raw = localStorage.getItem(ANSWERS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    return data[orgId] || {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\nfunction writeAssessmentAnswers(orgId, answers) {\r\n  try {\r\n    const raw = localStorage.getItem(ANSWERS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    data[orgId] = answers;\r\n    localStorage.setItem(ANSWERS_STORAGE_KEY, JSON.stringify(data));\r\n  } catch {}\r\n}\r\n\r\nfunction readAssessmentProgress(orgId) {\r\n  try {\r\n    const raw = localStorage.getItem(PROGRESS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    return data[orgId] || {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\nfunction writeAssessmentProgress(orgId, progress) {\r\n  try {\r\n    const raw = localStorage.getItem(PROGRESS_STORAGE_KEY);\r\n    const data = raw ? JSON.parse(raw) : {};\r\n    data[orgId] = progress;\r\n    localStorage.setItem(PROGRESS_STORAGE_KEY, JSON.stringify(data));\r\n  } catch {}\r\n}\r\n\r\n// Calculate answered count for a system based on the answer structure from Assessment.js\r\n// Assessment.js stores answers as: answers[subAssessmentId][questionId]\r\n// NOT as: answers[systemId][questionId]\r\nfunction calculateAnsweredCount(allAnswers, systemId) {\r\n  if (!allAnswers) return 0;\r\n  \r\n  // Count across all sub-assessments for this system\r\n  let totalAnswered = 0;\r\n  \r\n  // Find the system definition to get all its sub-assessments\r\n  const system = assessmentSystems.find(s => s.id === systemId);\r\n  if (!system || !system.subAssessments) return 0;\r\n  \r\n  // Count answered questions in each sub-assessment\r\n  // The answers are stored with subAssessment.id as the key, NOT systemId\r\n  system.subAssessments.forEach(subAssessment => {\r\n    const subAnswers = allAnswers[subAssessment.id] || {};\r\n    const answered = Object.keys(subAnswers).filter(key => {\r\n      const answer = subAnswers[key];\r\n      return answer !== null && answer !== undefined && answer !== '';\r\n    }).length;\r\n    totalAnswered += answered;\r\n  });\r\n  \r\n  return totalAnswered;\r\n}\r\n\r\n/* ---------- small UI primitives ---------- */\r\nfunction ProgressBar({ pct = 0, darkMode = false }) {\r\n  const containerBg = darkMode ? \"bg-gray-800\" : \"bg-gray-200\";\r\n  const fillClass = pct === 100 ? \"bg-green-500\" : \"bg-yellow-500\";\r\n  return (\r\n    <div className={`w-full h-2 rounded-full ${containerBg} overflow-hidden`}>\r\n      <div style={{ width: `${pct}%` }} className={`h-full ${fillClass}`} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SystemRow({ s, state, onStart, onView, onRemove, darkMode = false }) {\r\n  // state = { status: \"not-started\"|\"in-progress\"|\"completed\", progress, latestResult, answeredCount }\r\n  const hasAnswers = (state.answeredCount || 0) > 0;\r\n  const muted = !hasAnswers; // Only mute if no answers at all\r\n  const score = state.latestResult?.score ?? null;\r\n  const isAssessmentCompleted = state.status === \"completed\" && state.latestResult;\r\n  const hasRunCompleted = state.status === \"completed\" && score !== null;\r\n\r\n  const rowBgHover = darkMode ? \"hover:bg-gray-800\" : \"hover:bg-gray-50\";\r\n  const titleColor = darkMode ? \"text-gray-100\" : \"text-gray-900\";\r\n  const metaColor = darkMode ? \"text-gray-400\" : \"text-gray-500\";\r\n\r\n  // Run button logic: Lock (no answers) → Run (has answers, not running) → Running (in progress)\r\n  const isRunning = state.status === \"in-progress\" && state.progress < 100;\r\n  const runDisabled = isRunning || !hasAnswers;\r\n  const runBtnBase = runDisabled\r\n    ? `${darkMode ? \"bg-gray-800 text-gray-400 cursor-not-allowed\" : \"bg-gray-200 text-gray-500 cursor-not-allowed\"}`\r\n    : `${darkMode ? \"bg-blue-800 text-blue-200 hover:bg-blue-700\" : \"bg-blue-600 text-white hover:bg-blue-700\"}`;\r\n\r\n  // View button logic: Only enabled after run is completed with results\r\n  const viewDisabled = !hasRunCompleted;\r\n  const viewBtnBase = viewDisabled\r\n    ? `${darkMode ? \"bg-gray-900/20 text-gray-500 cursor-not-allowed\" : \"bg-gray-50 text-gray-400 cursor-not-allowed\"}`\r\n    : `${darkMode ? \"bg-green-800 text-green-200 hover:bg-green-700\" : \"bg-green-600 text-white hover:bg-green-700\"}`;\r\n\r\n  // Progress bar logic: show during analysis OR while answering questions\r\n  let progressPct = 0;\r\n  if (state.status === \"in-progress\") {\r\n    progressPct = state.progress;\r\n  } else if (hasAnswers && !isAssessmentCompleted) {\r\n    // Calculate percent answered\r\n    const system = assessmentSystems.find(sys => sys.id === s.id);\r\n    const totalQuestions = system ? system.subAssessments.reduce((sum, sub) => sum + sub.questions.length, 0) : 0;\r\n    progressPct = totalQuestions > 0 ? Math.round((state.answeredCount / totalQuestions) * 100) : 0;\r\n  }\r\n\r\n  return (\r\n    <div className={`flex items-center justify-between gap-2 p-2 rounded-md ${muted ? \"opacity-60\" : \"\"} ${rowBgHover} transition-all duration-200`}>\r\n      <div className=\"flex items-start gap-3 min-w-0\">\r\n        <div className=\"w-10 h-10 rounded-md bg-gradient-to-br from-indigo-600 to-blue-500 flex items-center justify-center text-white font-semibold\">\r\n          {s.icon}\r\n        </div>\r\n        <div className=\"min-w-0\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className={`font-medium truncate ${titleColor}`}>{s.title}</div>\r\n            {state.status === \"completed\" && (\r\n              <div className={`text-xs px-2 py-0.5 rounded-full ${darkMode ? \"bg-green-900/30 text-green-300\" : \"bg-green-100 text-green-700\"}`}>\r\n                {score}%\r\n              </div>\r\n            )}\r\n            {state.status === \"in-progress\" && (\r\n              <div className={`text-xs px-2 py-0.5 rounded-full ${darkMode ? \"bg-yellow-900/20 text-yellow-300\" : \"bg-yellow-100 text-yellow-700\"}`}>\r\n                In progress\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className={`text-xs ${metaColor} mt-1`}>\r\n            {!hasAnswers && \"Complete assessment questions first\"}\r\n            {hasAnswers && (state.status === \"not-started\" || state.status === \"ready-to-run\") && \"Ready to run analysis\"}\r\n            {hasAnswers && state.status === \"in-progress\" && state.progress < 100 && `Analyzing... ${state.progress}%`}\r\n            {hasAnswers && state.status === \"in-progress\" && state.progress >= 100 && \"Analysis complete\"}\r\n            {isAssessmentCompleted && `Analysis completed ${new Date(state.latestResult.timestamp).toLocaleString()}`}\r\n            {hasAnswers && !isAssessmentCompleted && state.status !== \"in-progress\" && `${state.answeredCount} questions answered`}\r\n          </div>\r\n\r\n          {(progressPct > 0 && !isAssessmentCompleted) && (\r\n            <div className=\"mt-2\">\r\n              <ProgressBar pct={progressPct} darkMode={darkMode} />\r\n            </div>\r\n          )}\r\n          {state.status === \"in-progress\" && (\r\n            <div className=\"mt-2\">\r\n              <ProgressBar pct={state.progress} darkMode={darkMode} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-1\">\r\n        <button\r\n          onClick={() => onStart(s.id)}\r\n          disabled={runDisabled}\r\n          title={!hasAnswers ? \"Complete assessment questions first to unlock analysis\" : isRunning ? \"Analysis in progress...\" : \"Run AI analysis on assessment data\"}\r\n          className={`px-2 py-1.5 rounded-md border text-xs font-medium transition-all duration-200 ${runBtnBase}`}\r\n        >\r\n          <FaPlay className=\"inline-block mr-1\" size={10} />\r\n          {isRunning ? \"Analyzing...\" : !hasAnswers ? \"🔒 Locked\" : \"▶ Run\"}\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => onView(s.id)}\r\n          disabled={viewDisabled}\r\n          title={viewDisabled ? \"Complete assessment to view results\" : \"View detailed results\"}\r\n          className={`px-2 py-1.5 rounded-md border text-xs transition-all duration-200 ${viewBtnBase}`}\r\n        >\r\n          <FaEye size={10} />\r\n        </button>\r\n\r\n        {state.latestResult && (\r\n          <button\r\n            onClick={() => onRemove(state.latestResult.id)}\r\n            className={`px-2 py-1.5 rounded-md text-xs transition-all duration-200 ${darkMode ? \"text-gray-400 hover:text-gray-200 hover:bg-gray-800\" : \"text-gray-500 hover:text-gray-700 hover:bg-gray-100\"}`}\r\n            title=\"Remove assessment\"\r\n          >\r\n            <FaTrash size={10} />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* ---------- main component ---------- */\r\nexport default function CEOAssessments() {\r\n  const { darkMode, org = null, user = null } = useOutletContext();\r\n  const orgId = org?.id || \"anon\";\r\n\r\n  // Broadcast parent theme changes as an event so nested components can optionally subscribe\r\n  useEffect(() => {\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:theme:changed\", { detail: { darkMode } }));\r\n    } catch {}\r\n  }, [darkMode]);\r\n\r\n  // recent are persisted assessment records for this org (chronological newest first)\r\n  const [recent, setRecent] = useState(() => {\r\n    try {\r\n      const all = readAll();\r\n      return all[orgId] || [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // systemStates maps systemId -> { status, progress, latestResult, answeredCount }\r\n  const [systemStates, setSystemStates] = useState(() => {\r\n    // derive initial state from recent items and persistent answers\r\n    const persistentAnswers = readAssessmentAnswers(orgId);\r\n    const init = {};\r\n    SYSTEMS.forEach((s) => {\r\n      const answeredCount = calculateAnsweredCount(persistentAnswers, s.id);\r\n      init[s.id] = { \r\n        status: \"not-started\", \r\n        progress: 0, \r\n        latestResult: null, \r\n        answeredCount \r\n      };\r\n    });\r\n    const byLatest = summarizeSystems(recent);\r\n    byLatest.forEach((b) => {\r\n      const answeredCount = calculateAnsweredCount(persistentAnswers, b.systemId);\r\n      if (!init[b.systemId]) {\r\n        init[b.systemId] = { \r\n          status: \"completed\", \r\n          progress: 100, \r\n          latestResult: b.result, \r\n          answeredCount \r\n        };\r\n      } else {\r\n        init[b.systemId] = { \r\n          status: \"completed\", \r\n          progress: 100, \r\n          latestResult: b.result, \r\n          answeredCount \r\n        };\r\n      }\r\n    });\r\n    return init;\r\n  });\r\n\r\n  // Real-time assessment progress tracking with persistent storage\r\n  // Note: Assessment.js manages the actual answer state internally\r\n  const [assessmentAnswers, setAssessmentAnswers] = useState({});\r\n  const [currentAssessmentSystem, setCurrentAssessmentSystem] = useState(null);\r\n  const [showDetailModal, setShowDetailModal] = useState(false);\r\n  const [selectedSystemDetails, setSelectedSystemDetails] = useState(null);\r\n  const [realTimeProgress, setRealTimeProgress] = useState(() => readAssessmentProgress(orgId));\r\n\r\n  // Close handler: hide modal then clear selected details after exit animation to avoid content flash\r\n  const handleClose = useCallback(() => {\r\n    setShowDetailModal(false);\r\n    // keep details for the duration of the exit animation so content doesn't disappear mid-animation\r\n    setTimeout(() => setSelectedSystemDetails(null), 320);\r\n  }, []);\r\n  \r\n  // Ref to track Assessment component's internal answer state (live)\r\n  const assessmentAnswersRef = useRef({});\r\n  \r\n  // Helper to get current answers (prefer live state from ref, fallback to state)\r\n  const getCurrentAnswers = () => {\r\n    return Object.keys(assessmentAnswersRef.current).length > 0 \r\n      ? assessmentAnswersRef.current \r\n      : assessmentAnswers;\r\n  };\r\n\r\n  // Broadcast update helper (persist + set state + broadcast event)\r\n  function persistAndBroadcast(newList) {\r\n    const all = readAll();\r\n    all[orgId] = newList;\r\n    writeAll(all);\r\n    setRecent(newList);\r\n\r\n    // update systemStates including answeredCount using LIVE answers\r\n    const byLatest = summarizeSystems(newList);\r\n    const currentAnswers = getCurrentAnswers(); // Use live answers from Assessment component\r\n    setSystemStates((prev) => {\r\n      const next = { ...prev };\r\n      SYSTEMS.forEach((s) => {\r\n        const answeredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n        next[s.id] = next[s.id] || { \r\n          status: \"not-started\", \r\n          progress: 0, \r\n          latestResult: null, \r\n          answeredCount \r\n        };\r\n        // Update answeredCount even if already exists\r\n        next[s.id].answeredCount = answeredCount;\r\n      });\r\n      byLatest.forEach((b) => {\r\n        const answeredCount = calculateAnsweredCount(currentAnswers, b.systemId);\r\n        next[b.systemId] = { \r\n          status: \"completed\", \r\n          progress: 100, \r\n          latestResult: b.result, \r\n          answeredCount \r\n        };\r\n      });\r\n      return next;\r\n    });\r\n\r\n    // emit update event\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:assessments:updated\", { detail: { orgId, list: newList } }));\r\n    } catch {}\r\n    // BroadcastChannel for cross-tab (optional)\r\n    try {\r\n      if (\"BroadcastChannel\" in window) {\r\n        const bc = new BroadcastChannel(\"conseqx_assessments\");\r\n        bc.postMessage({ type: \"assessments:update\", orgId, payload: newList });\r\n        bc.close();\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  // handle completion event (from Assessment/System pages)\r\n  function handleAssessmentComplete(result = {}) {\r\n    const normalized = {\r\n      id: result.id || `A-${Date.now().toString(36)}`,\r\n      systemId: result.systemId || result.system || \"general\",\r\n      title: result.title || result.name || (result.systemId || \"Assessment\"),\r\n      score: typeof result.score === \"number\" ? result.score : result.score ? Number(result.score) : null,\r\n      owner: result.owner || (user && user.name) || \"Unknown\",\r\n      meta: result.meta || {},\r\n      timestamp: result.timestamp || Date.now(),\r\n      orgId,\r\n      notes: result.notes || \"\",\r\n    };\r\n\r\n    const newList = addAssessmentForOrg(orgId, normalized, 200);\r\n    persistAndBroadcast(newList);\r\n\r\n    // NEW: feed normalized assessment into the OrgHealth service\r\n    try {\r\n      orgHealth.ingestAssessment(normalized);\r\n    } catch (e) {\r\n      // non-fatal\r\n      console.error(\"Error ingesting assessment into orgHealth service\", e);\r\n    }\r\n  }\r\n\r\n  // handle incoming events\r\n  useEffect(() => {\r\n    function onCompleted(e) {\r\n      const result = e?.detail;\r\n      if (!result || (result.orgId && result.orgId !== orgId)) return;\r\n      handleAssessmentComplete(result);\r\n    }\r\n    function onProgress(e) {\r\n      const { systemId, progress } = e?.detail || {};\r\n      if (!systemId) return;\r\n      setSystemStates((prev) => {\r\n        const cur = prev[systemId] || { status: \"not-started\", progress: 0, latestResult: null };\r\n        const nextState = {\r\n          ...prev,\r\n          [systemId]: {\r\n            ...cur,\r\n            status: progress >= 100 ? \"completed\" : \"in-progress\",\r\n            progress: Math.max(0, Math.min(100, progress)),\r\n          },\r\n        };\r\n        // if completed and we have result in event, call handleAssessmentComplete (if detail includes result)\r\n        if (progress >= 100 && e.detail?.result) {\r\n          handleAssessmentComplete(e.detail.result);\r\n        }\r\n        return nextState;\r\n      });\r\n    }\r\n\r\n    function onAssessmentStart(e) {\r\n      const { systemId } = e?.detail || {};\r\n      if (!systemId) return;\r\n      setCurrentAssessmentSystem(systemId);\r\n      // Do not set analysis status to in-progress when user opens the assessment.\r\n      // \"in-progress\" should only reflect the AI analysis run, not question answering.\r\n      // We'll keep the current status here.\r\n    }\r\n\r\n    function onQuestionAnswered(e) {\r\n      const { systemId, questionId, answer, totalQuestions, answeredCount } = e?.detail || {};\r\n      if (!systemId) return;\r\n      \r\n      // Calculate real-time progress based on actual answered count from Assessment.js\r\n      const realAnsweredCount = answeredCount || 0;\r\n      const progress = totalQuestions > 0 ? Math.round((realAnsweredCount / totalQuestions) * 100) : 0;\r\n      \r\n      // Update real-time progress tracking\r\n      setRealTimeProgress((prev) => {\r\n        const updated = {\r\n          ...prev,\r\n          [systemId]: progress,\r\n        };\r\n        // Persist progress\r\n        writeAssessmentProgress(orgId, updated);\r\n        return updated;\r\n      });\r\n      \r\n      // Update system state with real progress and answeredCount from the event\r\n      setSystemStates((prev) => ({\r\n        ...prev,\r\n        [systemId]: {\r\n          ...(prev[systemId] || {}),\r\n          // While answering questions, status should indicate readiness, not analysis state.\r\n          status: realAnsweredCount > 0 ? \"ready-to-run\" : \"not-started\",\r\n          // Keep analysis progress separate; answering questions doesn't change analysis progress.\r\n          progress: prev[systemId]?.progress || 0,\r\n          answeredCount: realAnsweredCount,\r\n        },\r\n      }));\r\n      \r\n      // Emit progress event for other components\r\n      events.emitAssessmentProgress({ orgId, systemId, progress, answeredCount: realAnsweredCount });\r\n    }\r\n\r\n    window.addEventListener(\"conseqx:assessment:completed\", onCompleted);\r\n    window.addEventListener(\"conseqx:assessment:progress\", onProgress);\r\n    window.addEventListener(\"conseqx:assessment:start\", onAssessmentStart);\r\n    window.addEventListener(\"conseqx:assessment:question-answered\", onQuestionAnswered);\r\n    \r\n    return () => {\r\n      window.removeEventListener(\"conseqx:assessment:completed\", onCompleted);\r\n      window.removeEventListener(\"conseqx:assessment:progress\", onProgress);\r\n      window.removeEventListener(\"conseqx:assessment:start\", onAssessmentStart);\r\n      window.removeEventListener(\"conseqx:assessment:question-answered\", onQuestionAnswered);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [orgId]);\r\n\r\n  // also listen for BroadcastChannel updates (cross-tab)\r\n  useEffect(() => {\r\n    if (!(\"BroadcastChannel\" in window)) return;\r\n    const bc = new BroadcastChannel(\"conseqx_assessments\");\r\n    const handler = (ev) => {\r\n      try {\r\n        const { type, orgId: msgOrg, payload } = ev.data || {};\r\n        if (type === \"assessments:update\" && msgOrg === orgId) {\r\n          setRecent(payload || []);\r\n          // update systemStates derived including answeredCount using LIVE answers\r\n          const byLatest = summarizeSystems(payload || []);\r\n          const currentAnswers = getCurrentAnswers(); // Use live answers\r\n          setSystemStates((prev) => {\r\n            const next = { ...prev };\r\n            SYSTEMS.forEach((s) => {\r\n              const answeredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n              next[s.id] = next[s.id] || { \r\n                status: \"not-started\", \r\n                progress: 0, \r\n                latestResult: null, \r\n                answeredCount \r\n              };\r\n              next[s.id].answeredCount = answeredCount;\r\n            });\r\n            byLatest.forEach((b) => {\r\n              const answeredCount = calculateAnsweredCount(currentAnswers, b.systemId);\r\n              next[b.systemId] = { \r\n                status: \"completed\", \r\n                progress: 100, \r\n                latestResult: b.result, \r\n                answeredCount \r\n              };\r\n            });\r\n            return next;\r\n          });\r\n        }\r\n      } catch (e) {}\r\n    };\r\n    bc.addEventListener(\"message\", handler);\r\n    return () => bc.close();\r\n  }, [orgId]);\r\n\r\n  // Sync with localStorage changes for real-time updates\r\n  useEffect(() => {\r\n    const syncFromStorage = () => {\r\n      const persistentProgress = readAssessmentProgress(orgId);\r\n      setRealTimeProgress(persistentProgress);\r\n      \r\n      // Update system states with current answered counts from LIVE state\r\n      const currentAnswers = getCurrentAnswers(); // Use live answers from Assessment\r\n      setSystemStates((prev) => {\r\n        const next = { ...prev };\r\n        SYSTEMS.forEach((s) => {\r\n          const answeredCount = calculateAnsweredCount(currentAnswers, s.id);\r\n          if (next[s.id]) {\r\n            next[s.id] = {\r\n              ...next[s.id],\r\n              answeredCount,\r\n              // Update status based on answers and current state\r\n              status: next[s.id].latestResult ? \"completed\" : \r\n                      answeredCount > 0 ? \"ready-to-run\" : \"not-started\"\r\n            };\r\n          }\r\n        });\r\n        return next;\r\n      });\r\n    };\r\n\r\n    // Listen for storage events (cross-tab sync)\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === ANSWERS_STORAGE_KEY || e.key === PROGRESS_STORAGE_KEY) {\r\n        syncFromStorage();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    \r\n    // Periodic sync to catch any missed updates\r\n    const syncInterval = setInterval(syncFromStorage, 1000);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n      clearInterval(syncInterval);\r\n    };\r\n  }, [orgId]);\r\n\r\n  // Prevent accidental navigation during active assessment\r\n  useEffect(() => {\r\n    const hasActiveAssessment = Object.values(systemStates).some(state => \r\n      (state.answeredCount || 0) > 0 && !state.latestResult\r\n    );\r\n\r\n    const handleBeforeUnload = (e) => {\r\n      if (hasActiveAssessment) {\r\n        e.preventDefault();\r\n        e.returnValue = 'You have unsaved assessment progress. Are you sure you want to leave?';\r\n        return 'You have unsaved assessment progress. Are you sure you want to leave?';\r\n      }\r\n    };\r\n\r\n    if (hasActiveAssessment) {\r\n      window.addEventListener('beforeunload', handleBeforeUnload);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, [systemStates]);\r\n\r\n  /* ---------- Actions invoked by the panel ---------- */\r\n\r\n  // onStart: if real system page is active, you should route there; else we simulate a run here.\r\n  function onStart(systemId) {\r\n    const cur = systemStates[systemId];\r\n    // if in-progress and <100 do nothing\r\n    if (cur && cur.status === \"in-progress\" && cur.progress < 100) return;\r\n\r\n    // if already completed, allow new run; otherwise start run\r\n    // Ideally you should navigate to the system-specific assessment UI here:\r\n    // navigate(`/system/${systemId}`) or open slide-over; for now emit an event\r\n    events.emitAssessmentStart({ systemId, orgId });\r\n\r\n    // if no other component will handle start, we simulate progress here and complete a deterministic result\r\n    simulateRunIfNoHandler(systemId);\r\n  }\r\n\r\n  // onView: show report for latestResult - can open slide-over or navigate to report page\r\n  function onView(systemId) {\r\n    const state = systemStates[systemId];\r\n    if (!state || !state.latestResult) return;\r\n    \r\n    // Find the system details\r\n    const systemDetails = SYSTEMS.find(s => s.id === systemId);\r\n    if (systemDetails) {\r\n      // Enrich modal with per-sub-assessment answers and progress\r\n      const allAnswers = getCurrentAnswers();\r\n      const sysDef = assessmentSystems.find(s => s.id === systemId);\r\n      const perSubAnswers = {};\r\n      sysDef?.subAssessments?.forEach(sub => {\r\n        if (allAnswers[sub.id]) perSubAnswers[sub.id] = allAnswers[sub.id];\r\n      });\r\n      // Calculate progress per sub-assessment\r\n      const subProgress = sysDef?.subAssessments?.map(sub => {\r\n        const total = sub.questions.length;\r\n        const answered = perSubAnswers[sub.id] ? Object.keys(perSubAnswers[sub.id]).filter(k => {\r\n          const a = perSubAnswers[sub.id][k];\r\n          return a !== null && a !== undefined && a !== '';\r\n        }).length : 0;\r\n        return { id: sub.id, title: sub.title, answered, total };\r\n      }) || [];\r\n\r\n      const details = {\r\n        ...systemDetails,\r\n        result: state.latestResult,\r\n        answers: perSubAnswers,\r\n        subProgress,\r\n      };\r\n      // don't reopen if already showing same result (prevents flicker)\r\n      if (showDetailModal && selectedSystemDetails && selectedSystemDetails.result?.id === state.latestResult.id) return;\r\n      setSelectedSystemDetails(details);\r\n      // open synchronously; details will be cleared after exit animation by handleClose\r\n      setShowDetailModal(true);\r\n    }\r\n    \r\n    // Also dispatch event for other components\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:assessment:view\", { detail: { result: state.latestResult } }));\r\n    } catch {}\r\n  }\r\n\r\n  function onRemove(id) {\r\n    const next = removeAssessmentForOrg(orgId, id);\r\n    persistAndBroadcast(next);\r\n  }\r\n\r\n  // Simulation: if nobody handles start event within a short time, run an internal simulated run\r\n  function simulateRunIfNoHandler(systemId) {\r\n    // mark in-progress\r\n    setSystemStates((prev) => ({ ...prev, [systemId]: { ...(prev[systemId] || {}), status: \"in-progress\", progress: 1 } }));\r\n\r\n    // simulate progress increments until 100\r\n    let pct = 1;\r\n    const ticker = setInterval(() => {\r\n      pct = Math.min(100, pct + Math.round(5 + Math.random() * 12));\r\n      // dispatch progress event (so all listeners get updated)\r\n      events.emitAssessmentProgress({ orgId, systemId, progress: pct });\r\n      if (pct >= 100) {\r\n        clearInterval(ticker);\r\n        // produce a deterministic result via service selector (mock or API)\r\n        (async () => {\r\n          const result = await svc.runAssessment(orgId, systemId);\r\n          events.emitAssessmentCompleted(result);\r\n        })();\r\n      }\r\n    }, 800);\r\n  }\r\n\r\n  // derived KPIs\r\n  const kpis = useMemo(() => {\r\n    const count = recent.length;\r\n    const avgScore = count ? Math.round(recent.reduce((s, r) => s + (Number(r.score) || 0), 0) / count) : null;\r\n    const lastRun = recent[0]?.timestamp || null;\r\n    return { count, avgScore, lastRun };\r\n  }, [recent]);\r\n\r\n  // Detailed Assessment Modal Component\r\n  // Always-mounted modal that shows/hides its content based on `isOpen` to avoid mount/unmount flicker\r\n  const DetailedAssessmentModal = ({ isOpen }) => {\r\n    if (!selectedSystemDetails && !isOpen) return null;\r\n\r\n  const { title, result, icon, answers, subProgress } = selectedSystemDetails || {};\r\n    const score = result?.score || 0;\r\n    const timestamp = result?.timestamp;\r\n\r\n    // Mock AI recommendations and case studies for demonstration\r\n    const aiRecommendations = [\r\n      \"Implement structured feedback loops to improve communication\",\r\n      \"Establish clear performance metrics and tracking systems\",\r\n      \"Develop cross-functional collaboration protocols\",\r\n      \"Create standardized training programs for consistency\"\r\n    ];\r\n\r\n    const caseStudy = {\r\n      company: \"Dangote Group (Nigeria)\",\r\n      challenge: `Similar challenges in ${title.toLowerCase()} across multiple business units`,\r\n      solution: \"Implemented centralized governance framework with decentralized execution\",\r\n      result: \"35% improvement in operational efficiency within 18 months\",\r\n      keyLessons: [\r\n        \"Standardized processes while maintaining local flexibility\",\r\n        \"Invested in technology infrastructure for real-time monitoring\",\r\n        \"Created cross-functional teams to break down silos\"\r\n      ]\r\n    };\r\n\r\n    return (\r\n      <AnimatePresence>\r\n        {isOpen && selectedSystemDetails && (\r\n          <motion.div\r\n            key={selectedSystemDetails.result?.id || 'detail-modal'}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\r\n            onClick={handleClose}\r\n          >\r\n            <motion.div\r\n              initial={{ scale: 0.9, opacity: 0 }}\r\n              animate={{ scale: 1, opacity: 1 }}\r\n              exit={{ scale: 0.9, opacity: 0 }}\r\n              className={`max-w-4xl w-full max-h-[90vh] overflow-y-auto rounded-2xl ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-200\"} border shadow-2xl`}\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n            {/* Header */}\r\n            <div className={`sticky top-0 ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-200\"} border-b px-6 py-4 flex items-center justify-between`}>\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-indigo-600 to-blue-500 flex items-center justify-center text-white text-xl font-bold\">\r\n                  {icon}\r\n                </div>\r\n                <div>\r\n                  <h2 className={`text-xl font-bold ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                    {title} Assessment Results\r\n                  </h2>\r\n                  <p className={`text-sm ${darkMode ? \"text-gray-400\" : \"text-gray-500\"}`}>\r\n                    Completed {timestamp ? new Date(timestamp).toLocaleString() : 'Recently'}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <button\r\n                onClick={handleClose}\r\n                className={`p-2 rounded-lg ${darkMode ? \"hover:bg-gray-800 text-gray-400\" : \"hover:bg-gray-100 text-gray-500\"}`}\r\n              >\r\n                <FaTimes size={20} />\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"p-6 space-y-6\">\r\n              {/* Score Overview */}\r\n              <div className={`rounded-xl p-4 ${darkMode ? \"bg-gray-800\" : \"bg-gray-50\"}`}>\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h3 className={`font-semibold ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>Overall Score</h3>\r\n                  <div className={`text-2xl font-bold ${score >= 80 ? \"text-green-500\" : score >= 60 ? \"text-yellow-500\" : \"text-red-500\"}`}>\r\n                    {score}%\r\n                  </div>\r\n                </div>\r\n                <div className={`w-full h-3 rounded-full ${darkMode ? \"bg-gray-700\" : \"bg-gray-200\"}`}>\r\n                  <div\r\n                    className={`h-full rounded-full transition-all duration-500 ${\r\n                      score >= 80 ? \"bg-green-500\" : score >= 60 ? \"bg-yellow-500\" : \"bg-red-500\"\r\n                    }`}\r\n                    style={{ width: `${score}%` }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Sub-assessments with progress and answers */}\r\n              <div>\r\n                <h3 className={`text-lg font-semibold mb-4 ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                  Assessment Breakdown\r\n                </h3>\r\n                <div className=\"space-y-3\">\r\n                  {subProgress.map((sub, index) => (\r\n                    <div key={sub.id} className={`p-4 rounded-lg border ${darkMode ? \"bg-gray-800 border-gray-700\" : \"bg-gray-50 border-gray-200\"}`}>\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <h4 className={`font-medium ${darkMode ? \"text-gray-200\" : \"text-gray-800\"}`}>{sub.title}</h4>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FaCheckCircle className=\"text-green-500\" size={16} />\r\n                          <span className={`text-sm ${darkMode ? \"text-gray-400\" : \"text-gray-600\"}`}>\r\n                            {sub.answered} / {sub.total} answered\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"w-full mb-2\">\r\n                        <ProgressBar pct={sub.total > 0 ? Math.round((sub.answered / sub.total) * 100) : 0} darkMode={darkMode} />\r\n                      </div>\r\n                      <p className={`text-sm ${darkMode ? \"text-gray-400\" : \"text-gray-600\"}`}>Questions:</p>\r\n                      <ul className=\"list-disc list-inside ml-4\">\r\n                        {Object.entries(answers[sub.id] || {}).map(([qid, val]) => (\r\n                          <li key={qid} className={`text-xs ${darkMode ? \"text-gray-300\" : \"text-gray-700\"}`}>Q{qid}: <span className=\"font-semibold\">{val}</span></li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* AI Recommendations */}\r\n              <div>\r\n                <h3 className={`text-lg font-semibold mb-4 flex items-center gap-2 ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                  <FaLightbulb className=\"text-yellow-500\" />\r\n                  AI Recommendations\r\n                </h3>\r\n                <div className=\"space-y-2\">\r\n                  {aiRecommendations.map((rec, index) => (\r\n                    <div key={index} className={`p-3 rounded-lg ${darkMode ? \"bg-blue-900/20 border-blue-500/30\" : \"bg-blue-50 border-blue-200\"} border`}>\r\n                      <p className={`text-sm ${darkMode ? \"text-blue-200\" : \"text-blue-800\"}`}>{rec}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* African Company Case Study */}\r\n              <div>\r\n                <h3 className={`text-lg font-semibold mb-4 flex items-center gap-2 ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>\r\n                  <FaBuilding className=\"text-green-500\" />\r\n                  African Success Story\r\n                </h3>\r\n                <div className={`rounded-xl p-4 border ${darkMode ? \"bg-green-900/20 border-green-500/30\" : \"bg-green-50 border-green-200\"}`}>\r\n                  <div className=\"space-y-3\">\r\n                    <div>\r\n                      <h4 className={`font-semibold ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>{caseStudy.company}</h4>\r\n                      <p className={`text-sm mt-1 ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{caseStudy.challenge}</p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h5 className={`font-medium ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>Solution:</h5>\r\n                      <p className={`text-sm ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{caseStudy.solution}</p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h5 className={`font-medium ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>Result:</h5>\r\n                      <p className={`text-sm ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{caseStudy.result}</p>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h5 className={`font-medium ${darkMode ? \"text-green-200\" : \"text-green-800\"}`}>Key Lessons:</h5>\r\n                      <ul className=\"list-disc list-inside space-y-1 mt-1\">\r\n                        {caseStudy.keyLessons.map((lesson, index) => (\r\n                          <li key={index} className={`text-sm ${darkMode ? \"text-green-300\" : \"text-green-700\"}`}>{lesson}</li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        </motion.div>\r\n      )}\r\n      </AnimatePresence>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"flex items-start justify-between gap-4\">\r\n        <div>\r\n          <h2 className={`${darkMode ? \"text-gray-100\" : \"text-gray-900\"} text-lg font-semibold`}>Assessments</h2>\r\n          <p className={`mt-2 text-sm ${darkMode ? \"text-gray-300\" : \"text-gray-600\"}`}>\r\n            Run or view system assessments. Systems update in real-time as runs progress and complete.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className={`${darkMode ? \"text-gray-200\" : \"text-sm text-gray-700\"}`}>\r\n            <div>\r\n              Recent runs: <span className=\"font-semibold\">{kpis.count}</span>\r\n            </div>\r\n            <div className={`${darkMode ? \"text-gray-400\" : \"text-xs text-gray-500\"}`}>Avg score: {kpis.avgScore !== null ? `${kpis.avgScore}%` : \"—\"}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-4 grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n        <div className=\"lg:col-span-2\">\r\n          <div className={`rounded-xl p-3 border ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-100\"} shadow-sm`}>\r\n            {/* Embedded Assessment component: it should call onComplete when it finishes */}\r\n            {/* Pass darkMode prop + key to force remount on theme change so internal theme state can't diverge */}\r\n            <Assessment\r\n              key={darkMode ? \"assessment-dark\" : \"assessment-light\"}\r\n              darkMode={darkMode}\r\n              onComplete={(res) => handleAssessmentComplete(res)}\r\n              onAnswersChange={(answers) => {\r\n                // Track the actual answer state from Assessment.js\r\n                assessmentAnswersRef.current = answers;\r\n                setAssessmentAnswers(answers);\r\n                \r\n                // Immediately update system states with new answered counts\r\n                setSystemStates((prev) => {\r\n                  const next = { ...prev };\r\n                  SYSTEMS.forEach((s) => {\r\n                    const answeredCount = calculateAnsweredCount(answers, s.id);\r\n                    if (next[s.id]) {\r\n                      next[s.id] = {\r\n                        ...next[s.id],\r\n                        answeredCount,\r\n                        // Update status based on current answers\r\n                        status: next[s.id].latestResult ? \"completed\" : \r\n                                answeredCount > 0 ? \"ready-to-run\" : \"not-started\"\r\n                      };\r\n                    } else {\r\n                      // Initialize if doesn't exist\r\n                      next[s.id] = {\r\n                        status: answeredCount > 0 ? \"ready-to-run\" : \"not-started\",\r\n                        progress: 0,\r\n                        latestResult: null,\r\n                        answeredCount\r\n                      };\r\n                    }\r\n                  });\r\n                  return next;\r\n                });\r\n              }}\r\n              onQuestionAnswered={(data) => {\r\n                // Emit real-time progress event with enhanced data\r\n                window.dispatchEvent(new CustomEvent(\"conseqx:assessment:question-answered\", { \r\n                  detail: {\r\n                    ...data,\r\n                    orgId,\r\n                    timestamp: Date.now()\r\n                  }\r\n                }));\r\n              }}\r\n              onSystemStart={(systemId) => {\r\n                // Emit system start event\r\n                window.dispatchEvent(new CustomEvent(\"conseqx:assessment:start\", { \r\n                  detail: { \r\n                    systemId, \r\n                    orgId,\r\n                    timestamp: Date.now()\r\n                  } \r\n                }));\r\n              }}\r\n              showClientInfo={false}\r\n              customSystems={createAssessmentSystems()}\r\n              ceoPartnerMode={true}\r\n              orgId={orgId}\r\n              // Pass current answers to maintain state\r\n              initialAnswers={assessmentAnswers}\r\n              // Enable real-time progress tracking\r\n              enableRealTimeTracking={true}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <aside className={`rounded-xl p-3 border ${darkMode ? \"bg-gray-900 border-gray-700\" : \"bg-white border-gray-100\"} shadow-sm`}>\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <div className={`text-sm font-semibold ${darkMode ? \"text-gray-100\" : \"text-gray-900\"}`}>Systems</div>\r\n            <div className={`${darkMode ? \"text-xs text-gray-400\" : \"text-xs text-gray-500\"} flex items-center gap-2`}>\r\n              <FaHistory /> <span>{recent.length}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            {SYSTEMS.map((s) => {\r\n              const currentState = systemStates[s.id] || { \r\n                status: \"not-started\", \r\n                progress: 0, \r\n                latestResult: null, \r\n                answeredCount: 0 \r\n              };\r\n              \r\n              return (\r\n                <SystemRow\r\n                  key={s.id}\r\n                  s={s}\r\n                  state={currentState}\r\n                  onStart={onStart}\r\n                  onView={onView}\r\n                  onRemove={onRemove}\r\n                  darkMode={darkMode}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div className={`mt-3 border-t pt-2 ${darkMode ? \"text-xs text-gray-400 border-gray-800\" : \"text-xs text-gray-500 border-gray-200\"}`}>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className={`w-2 h-2 rounded-full ${darkMode ? \"bg-blue-500\" : \"bg-blue-600\"} animate-pulse`}></div>\r\n                <span>Real-time assessment tracking with X-Ultra intelligence</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-1\">\r\n                {Object.values(systemStates).some(state => (state.answeredCount || 0) > 0) && (\r\n                  <span className={`px-2 py-0.5 rounded-full text-xs ${darkMode ? \"bg-green-900/30 text-green-300\" : \"bg-green-100 text-green-700\"}`}>\r\n                    Active\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </aside>\r\n      </div>\r\n      \r\n  {/* Detailed Assessment Modal (mounted always, visibility controlled by isOpen) */}\r\n  <DetailedAssessmentModal isOpen={showDetailModal} />\r\n    </section>\r\n  );\r\n}\r\n","// src/pages/CEO_Dashboard/services/orgHealth/index.js\r\n// Minimal OrgHealth service: ingest assessment -> map to simple metrics -> compute score -> persist -> emit events\r\n\r\nimport { computeSystemScore } from \"./score\";\r\n\r\nconst ORG_HEALTH_KEY = \"conseqx_org_health_v1\";\r\n\r\n/**\r\n * Persist results per orgId (simple localStorage JSON).\r\n */\r\nfunction readAll() {\r\n  try {\r\n    const raw = localStorage.getItem(ORG_HEALTH_KEY);\r\n    return raw ? JSON.parse(raw) : {};\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\nfunction writeAll(obj) {\r\n  try {\r\n    localStorage.setItem(ORG_HEALTH_KEY, JSON.stringify(obj));\r\n  } catch {}\r\n}\r\n\r\n/**\r\n * Save a single computed system result\r\n */\r\nexport function saveResult(orgId, result) {\r\n  if (!orgId) orgId = \"anon\";\r\n  const all = readAll();\r\n  const arr = all[orgId] || [];\r\n  // Prepend newest\r\n  arr.unshift(result);\r\n  all[orgId] = arr.slice(0, 300); // keep a cap\r\n  writeAll(all);\r\n\r\n  try {\r\n    window.dispatchEvent(new CustomEvent(\"conseqx:orghealth:completed\", { detail: { orgId, result } }));\r\n  } catch {}\r\n}\r\n\r\n/**\r\n * Basic mapping: convert an assessment result into metrics for a given system.\r\n * This is intentionally simple and deterministic.\r\n *\r\n * result: normalized assessment object (see Assessments.js normalized variable)\r\n */\r\nexport function ingestAssessment(result = {}) {\r\n  try {\r\n    const orgId = result.orgId || \"anon\";\r\n    const systemId = result.systemId || result.system || \"general\";\r\n\r\n    // Build example metrics by looking into result.meta and score\r\n    // We expect Assessment meta to include helpful keys; otherwise derive from score\r\n    const meta = result.meta || {};\r\n\r\n    // Basic normalized metrics (0..1)\r\n    // - networkDensity: prefer explicit meta.networkDensity or derive from score\r\n    // - sentiment: prefer meta.sentiment (-1..1) -> map to 0..1\r\n    // - operational: prefer meta.operational (0..1)\r\n    const networkDensity = typeof meta.networkDensity === \"number\" ? Math.max(0, Math.min(1, meta.networkDensity)) : (Number(result.score) ? Math.min(1, result.score / 100) : 0.5);\r\n    const rawSent = typeof meta.sentiment === \"number\" ? meta.sentiment : null; // expected -1..1\r\n    const sentiment = rawSent !== null ? Math.max(0, Math.min(1, (rawSent + 1) / 2)) : Math.min(1, (Number(result.score) || 0) / 100);\r\n    const operational = typeof meta.operational === \"number\" ? Math.max(0, Math.min(1, meta.operational)) : Math.min(1, (Number(result.score) || 0) / 100);\r\n\r\n    // Choose weights depending on system\r\n    const defaultWeights = { networkDensity: 0.4, sentiment: 0.3, operational: 0.3 };\r\n    let weights = defaultWeights;\r\n\r\n    // Example per-system custom weights\r\n    const systemWeights = {\r\n      interdependency: { networkDensity: 0.6, sentiment: 0.2, operational: 0.2 },\r\n      investigation: { networkDensity: 0.2, sentiment: 0.2, operational: 0.6 },\r\n      inlignment: { networkDensity: 0.2, sentiment: 0.4, operational: 0.4 },\r\n      orchestration: { networkDensity: 0.3, sentiment: 0.2, operational: 0.5 },\r\n      illustration: { networkDensity: 0.2, sentiment: 0.5, operational: 0.3 },\r\n      interpretation: { networkDensity: 0.2, sentiment: 0.5, operational: 0.3 }\r\n    };\r\n    if (systemWeights[systemId]) weights = systemWeights[systemId];\r\n\r\n    const metrics = {\r\n      networkDensity,\r\n      sentiment,\r\n      operational\r\n    };\r\n\r\n    const score = computeSystemScore(metrics, weights);\r\n\r\n    const out = {\r\n      id: result.id || `oh-${Date.now().toString(36)}`,\r\n      orgId,\r\n      systemId,\r\n      score,\r\n      breakdown: metrics,\r\n      provenance: {\r\n        sourceAssessmentId: result.id,\r\n        algorithmVersion: \"orghealth-v1\",\r\n        createdAt: Date.now()\r\n      },\r\n      timestamp: Date.now(),\r\n      // keep original result for traceability\r\n      original: {\r\n        title: result.title,\r\n        owner: result.owner,\r\n        meta: result.meta || {}\r\n      }\r\n    };\r\n\r\n    // Persist result\r\n    saveResult(orgId, out);\r\n\r\n    // Build a small recommendation stub (consumer UI can enrich or run an LLM for richer text)\r\n    const recommendation = {\r\n      id: `rec-${Date.now().toString(36)}`,\r\n      title: `Investigate ${systemId} - ${score}%`,\r\n      summary: `System ${systemId} received a score of ${score}%. Key drivers: ${Object.entries(metrics).map(([k, v]) => `${k}=${Math.round(v * 100)}%`).join(\", \")}.`,\r\n      impact: score < 60 ? \"High — potential risk\" : score < 75 ? \"Medium\" : \"Low\",\r\n      severity: score < 60 ? \"warning\" : \"improvement\",\r\n      predictions: {\r\n        short: score < 60 ? \"Short term: Operational friction, delays.\" : \"Short term: Stable\",\r\n        mid: score < 60 ? \"Mid term: Reduced throughput if unresolved.\" : \"Mid term: Maintain improvements\",\r\n        long: \"Long term: Monitor trends\"\r\n      },\r\n      evidence: [\r\n        `Derived from assessment ${result.id}`,\r\n        ...(result.meta && result.meta.notes ? [result.meta.notes] : [])\r\n      ],\r\n      comparables: [],\r\n      recommendedMeeting: {\r\n        title: `Cross-functional sync: ${systemId}`,\r\n        urgency: score < 60 ? \"Urgent\" : \"High\",\r\n        attendees: [\"Head of Product\", \"Head of Engineering\", \"Ops Lead\"],\r\n        proposedDurationMin: 45,\r\n        agenda: [\"Review findings\", \"Assign owners\", \"Agree next steps\"]\r\n      },\r\n      source: `Assessment: ${systemId}`,\r\n      createdAt: Date.now()\r\n    };\r\n\r\n    // Emit recommendation event for UI to pick up\r\n    try {\r\n      window.dispatchEvent(new CustomEvent(\"conseqx:orghealth:recommendation\", { detail: { orgId, recommendations: [recommendation] } }));\r\n    } catch {}\r\n\r\n    return out;\r\n  } catch (e) {\r\n    // swallow errors (non-fatal) — real service should surface logs\r\n    console.error(\"orgHealth.ingestAssessment error\", e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Return persisted results for an org\r\n */\r\nexport function getResults(orgId) {\r\n  const all = readAll();\r\n  return all[orgId] || [];\r\n}\r\n","// src/pages/CEO_Dashboard/services/orgHealth/score.js\r\n// Small deterministic scoring util for organizational health systems.\r\n// Keep calculations simple and auditable.\r\n\r\nexport function computeSystemScore(metrics = {}, weights = {}) {\r\n  // metrics: { metricKey: valueBetween0And1, ... }\r\n  // weights: { metricKey: weight, ... }\r\n  const weightKeys = Object.keys(weights);\r\n  if (weightKeys.length === 0) {\r\n    // If no weights provided, average metrics\r\n    const vals = Object.values(metrics);\r\n    if (vals.length === 0) return 0;\r\n    const avg = vals.reduce((s, v) => s + (Number(v) || 0), 0) / vals.length;\r\n    return Math.round(avg * 100);\r\n  }\r\n\r\n  const sumWeights = weightKeys.reduce((s, k) => s + (Number(weights[k]) || 0), 0) || 1;\r\n  const raw = weightKeys.reduce((acc, k) => {\r\n    const v = Number(metrics[k]) || 0;\r\n    const w = Number(weights[k]) || 0;\r\n    return acc + v * w;\r\n  }, 0);\r\n  const normalized = raw / sumWeights;\r\n  return Math.round(Math.max(0, Math.min(1, normalized)) * 100);\r\n}\r\n"],"names":["EVENT_NAMES","start","progress","completed","view","emitAssessmentStart","_ref","orgId","systemId","window","dispatchEvent","CustomEvent","detail","_unused","emitAssessmentProgress","_ref2","result","_unused2","emitAssessmentCompleted","resultObject","_unused3","SYSTEMS","getSystemsForUI","STORAGE_KEY","ANSWERS_STORAGE_KEY","PROGRESS_STORAGE_KEY","readAll","raw","localStorage","getItem","JSON","parse","writeAll","obj","setItem","stringify","summarizeSystems","bySys","arguments","length","undefined","forEach","r","k","normalizeSystemKey","timestamp","_objectSpread","Object","keys","map","score","readAssessmentProgress","_unused5","calculateAnsweredCount","allAnswers","totalAnswered","system","assessmentSystems","find","s","id","subAssessments","subAssessment","subAnswers","answered","filter","key","answer","ProgressBar","pct","darkMode","containerBg","fillClass","_jsx","className","concat","children","style","width","SystemRow","_state$latestResult$s","_state$latestResult","state","onStart","onView","onRemove","hasAnswers","answeredCount","muted","latestResult","isAssessmentCompleted","status","hasRunCompleted","rowBgHover","titleColor","metaColor","isRunning","runDisabled","runBtnBase","viewDisabled","viewBtnBase","progressPct","sys","totalQuestions","reduce","sum","sub","questions","Math","round","_jsxs","icon","title","Date","toLocaleString","onClick","disabled","FaPlay","size","FaEye","FaTrash","CEOAssessments","org","user","useOutletContext","useEffect","_unused7","recent","setRecent","useState","_unused8","systemStates","setSystemStates","persistentAnswers","readAssessmentAnswers","init","b","assessmentAnswers","setAssessmentAnswers","currentAssessmentSystem","setCurrentAssessmentSystem","showDetailModal","setShowDetailModal","selectedSystemDetails","setSelectedSystemDetails","realTimeProgress","setRealTimeProgress","handleClose","useCallback","setTimeout","assessmentAnswersRef","useRef","getCurrentAnswers","current","persistAndBroadcast","newList","all","byLatest","currentAnswers","prev","next","list","_unused9","bc","BroadcastChannel","postMessage","type","payload","close","_unused0","handleAssessmentComplete","normalized","now","toString","name","Number","owner","meta","notes","max","arr","x","slice","addAssessmentForOrg","orgHealth","e","console","error","cur","events","ticker","setInterval","min","random","clearInterval","svc","simulateRunIfNoHandler","systemDetails","_sysDef$subAssessment","_sysDef$subAssessment2","_selectedSystemDetail","sysDef","perSubAnswers","subProgress","total","a","details","answers","_unused1","removeAssessmentForOrg","onCompleted","onProgress","_e$detail","nextState","onAssessmentStart","onQuestionAnswered","questionId","realAnsweredCount","updated","data","_unused6","writeAssessmentProgress","_prev$systemId","addEventListener","removeEventListener","ev","msgOrg","syncFromStorage","persistentProgress","handleStorageChange","syncInterval","hasActiveAssessment","values","some","handleBeforeUnload","preventDefault","returnValue","kpis","useMemo","_recent$","count","avgScore","lastRun","DetailedAssessmentModal","_ref3","_selectedSystemDetail2","isOpen","caseStudy","company","challenge","toLowerCase","solution","keyLessons","AnimatePresence","motion","div","initial","opacity","animate","exit","scale","stopPropagation","FaTimes","index","FaCheckCircle","entries","_ref4","qid","val","FaLightbulb","rec","FaBuilding","lesson","Assessment","onComplete","res","onAnswersChange","onSystemStart","showClientInfo","customSystems","ceoPartnerMode","initialAnswers","enableRealTimeTracking","FaHistory","currentState","ORG_HEALTH_KEY","saveResult","unshift","ingestAssessment","networkDensity","rawSent","sentiment","operational","weights","systemWeights","interdependency","investigation","inlignment","orchestration","illustration","interpretation","metrics","weightKeys","vals","avg","v","sumWeights","acc","computeSystemScore","out","breakdown","provenance","sourceAssessmentId","algorithmVersion","createdAt","original","recommendation","summary","join","impact","severity","predictions","short","mid","long","evidence","comparables","recommendedMeeting","urgency","attendees","proposedDurationMin","agenda","source","recommendations","_unused4","getResults"],"sourceRoot":""}